# PHOTOSYNTHESIS IN SILICO.
# Copyright (C) 2023 Computational Life Science RWTH Aachen
# Sarah Philipps et al., 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-12-02 17:21+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"


#: This can be copied to add new text entries with translations
msgid "INSERT_PLACEHOLDER_HERE"
msgstr ""

# SIDEBAR
msgid "SIMPLE"
msgstr "Simple"


msgid "ADVANCED"
msgstr "Advanced"

#: EINFÜHRUNG.py:
msgid "LANGUAGE"
msgstr "Language"

#: This can be copied to add new text entries with translations
msgid "EXPANDER_ABOUT"
msgstr "About this Website"

#: This can be copied to add new text entries with translations
msgid "EXPLANATION_ABOUT"
msgstr "This website is available online and directly usable at <https://annamatuszynska-biotool-photosynthesis-start-wrd4lw.streamlit.app/>. Additionally, all source code can be downloaded from GitHub at <https://github.com/AnnaMatuszynska/biotool-photosynthesis> and run (offline) locally. For information  on how to download and run the notebook, please refer to the `README.md` file on GitHub."

#: pages/1 Messmethode.py:49
msgid "LITERATURE"
msgstr "Literature"

#: pages/1 Messmethode.py:50
msgid "LITERATURE_DECLARATION"
msgstr "The following literature provides more in-depth information on the subject of PAM measurements, or offers the opportunity to familiarize oneself with the basics."


msgid "CAPTION_PAM"
msgstr "Schematic representation of the main principles behind chlorophyll a fluorescence and PAM experiment."

#: EINFÜHRUNG.py:36
msgid "HEADLINE_PRODUCENTEN"
msgstr "#### Consumers vs producers"

#: EINFÜHRUNG.py:37
msgid "PRODUCENTEN_EXPLANATION"
msgstr "By a **consumer** we mean living beings that feed on biomass produced by other living beings. All living beings that can produce biomass are called **producers**. These include, in particular, plants. These can produce biomass independently through photosynthesis, for example."

#: Start.py:10
#: EINFÜHRUNG.py:21
msgid "HEADLINE_MAIN"
msgstr "# Photosynthesis *in silico*: an Interactive Dashboard to Study Photosynthesis using a Computational Model"

#: Start.py:11
#: Intro by Anna
# Grammarly checked
msgid "INTRO"
msgstr "Welcome to a Teaching Tool in Biology, a project launched by the **Computational Life Science Lab** at the RWTH Aachen University, Germany. Our goal is to provide a teaching tool applicable to the needs of 21st-century students. We want to show how computational modeling supports the current research in increasing our understanding of how the world works. We have selected photosynthesis as THE process to demonstrate it. In the end, photosynthesis is arguably the most important process on Earth! Why don't you start your adventure with this interactive dashboard by listening to the process of photosynthesis."

#: Start.py:15
#: EINFÜHRUNG.py:24
# Grammarly checked
msgid "HEADLINE_USAGE"
msgstr "## How to use this website"

#: Start.py:16
#: EINFÜHRUNG.py:24
# Grammarly checked
msgid "USAGE"
msgstr "We aimed at both curious **newcomers** and more :blue[Advanced] learners. When using this website, you can choose which version you want to use by clicking on the left side button: Version and selecting from the drop-down list *Simple* or *:blue[Advanced]*."

#: Start.py:17
#: EINFÜHRUNG.py:26
# Grammarly checked
msgid "ADVANCED_USE"
msgstr "In this :blue[Advanced] version we will explain in detail an experimental method for measuring photosynthesis dynamics and calculating photosynthetic parameters. These methods will be used on a simple mathematical model of plant light adaption with the possibility of creating and investigating *in silico* mutants. In this version, more parameters of the mathematical model can be altered, allowing for more complex *in silico* mutants, and more outputs will be generated."

#: Start.py:18
#: EINFÜHRUNG.py:28
msgid "DROP_BOX_INTRO"
msgstr "If you need to learn the difference between the *in vitro*, *in vivo*, and *in silico*, open the drop-box below."

#: Start.py:23
#: EINFÜHRUNG.py:28
msgid "EXPANDER_IN"
msgstr "Differences between _in vitro_, _in vivo_ and _in silico_"

#: Start.py:24
#: EINFÜHRUNG.py:28
msgid "EXPLANATION_IN_VITRO"
msgstr "*In vitro* refers to experiments conducted outside a living organism in a controlled laboratory setting."

#: Start.py:25
#: EINFÜHRUNG.py:28
msgid "EXPLANATION_IN_VIVO"
msgstr "*In vivo* refers to experiments conducted inside a living organism, usually animals or humans."

#: Start.py:26
#: EINFÜHRUNG.py:28
msgid "EXPLANATION_IN_SILICO"
msgstr "*In silico* refers to computational experiments and simulations performed using computer models and algorithms."

#: pages/1 Messmethode.py:50
msgid "HEADLINE_PAGES"
msgstr "## Abstract of the pages"

#: pages/1 Messmethode.py:50
# Grammarly checked
msgid "INTRODUCTION_PAGES"
msgstr "In the following, we will give you a short overview of what you can expect on the following pages."

#: pages/1 Messmethode.py:50
# Grammarly checked
msgid "PHOTOSYNTHESIS"
msgstr "The **photosynthesis page** will give a short summary of the fundamental mechanisms of photosynthesis, in-depth information on climate change as well as a molecular description of the photoprotective mechanism."

#: pages/1 Messmethode.py:50
msgid "METHOD"
msgstr "The **measuring method page** will explain a state-of-the-art method of measuring photosynthetic parameters using non-invasive fluorescence. Literature for further reading is also provided."

#: pages/1 Messmethode.py:50
# Grammarly checked
msgid "MODEL"
msgstr "Mathematical modelling therory and examples of popular models be presented on the **computational models page**. Additionally, we demonstrate the implementation of mathematical model in a programming language Python."

#: pages/1 Messmethode.py:50
# Grammarly checked
msgid "EXPERIMENT"
msgstr "On the page **experiments** ***in silico***, we introduce a photosynthesis model co-developed by Anna Matuszyńska which will serve as an example for the alteration and evaluation of mathematical models. The mathematical definition of the model will be explained and simple simulations performed, including the editing of model parameters."

#: pages/1 Messmethode.py:50
msgid "MEMORY"
msgstr "Lastly, the **plant light memory page** will explain how the plant non-photochemical quenching mechanism leads to a memory effect of light conditions and how the mathematical model can be used for investigation."

#: pages/photosynthesis.py:10
#: Lisa's introduction
msgid "HEADLINE_PHOTOSYNTHESIS_PAGE"
msgstr "# Photosynthesis"

#: pages/photosynthesis.py:10
#: Lisa's introduction
msgid "HEADLINE_CLIMATE"
msgstr "## Climate Change"

#: pages/photosynthesis.py:11
#: Lisa's introduction
# Grammarly checked
msgid "INTRODUCTION_CLIMATE_CHANGE"
msgstr "*Climate* is defined as the average statistical measurements of the weather over a long period in a specific place. *Climate change* is defined as a worldwide change in the climate. Three main categories can induce a change in the climate:"

#: pages/photosynthesis.py:14
#: Lisa's introduction
msgid "POINT_1"
msgstr "- plate tectonics and vulcanism"

#: pages/photosynthesis.py:15
#: Lisa's introduction
msgid "POINT_2"
msgstr "- earth orbit transitions"

#: pages/photosynthesis.py:16
#: Lisa's introduction
msgid "POINT_3"
msgstr "- emissions of heat-trapping gasses"

#: pages/photosynthesis.py:17
#: Lisa's introduction
# Grammarly checked
msgid "END_OF_INTRODUCTION"
msgstr "In the history of the Earth, several times climate changes occurred. In 2016, *97% of climate researchers* agreed that currently we are in a human-caused global warming (Cook et al., 2016), and research is needed to understand the impact of the sudden rise of Earth Temperature."

#: pages/photosynthesis.py:32
#: EINFÜHRUNG.py:42
msgid "HEADLINE_PHOTOSYNTHESIS"
msgstr "## Process of Photosynthesis"

#: pages/photosynthesis.py:33
#: EINFÜHRUNG.py:43
# Grammarly checked
msgid "PHOTOSYNTHESIS_EXPLANATION_1"
msgstr "Plants are autotrophic and can thus produce complex organic compounds like sugars, lipids, and proteins from simple nutrients."

#: pages/photosynthesis.py:34
#: EINFÜHRUNG.py:43
msgid "PHOTOSYNTHESIS_EXPLANATION_2"
msgstr "Fundamentally, photosynthesis is a multi-step process that uses the energy carried by photons and absorbed by pigments to fix CO₂ into carbohydrates, which are then metabolised into further organic compounds. The net stoichiometry of photosynthesis is :[red] 6 CO₂ + 6 H₂O + *light energy* -> C₆H₁₂O₆ + 6 O₂, thus resulting in the production of molecular oxygen."

#: pages/photosynthesis.py:44
#: EINFÜHRUNG.py:43
msgid "CAPTION_FOTOSYNTHESE_PICTURE"
msgstr "Simplified photosynthesis process"

#: pages/photosynthesis.py:47
#: PHOTOSYNTHESIS.py:45
msgid "CAPTION_FOTOSYNTHESE_LEAF_ZOOM"
msgstr "Schematic zoom into a leaf: The cross-section shows chloroplasts-containing mesophyll cells. The photosynthesis light reactions take place within the inner membrane system of chloroplasts. These thylakoid membranes form stacked structures which delimit an inner lumen from the chloroplast stroma. Within the membrane, a series of protein complexes and metabolic cariers uses light energy to produce the energy equivalents ATP and NADPH, which fuel metabolism - mainly the fixation of CO₂ within the 'dark reaction'."

#: pages/photosynthesis.py:56
#: EINFÜHRUNG.py:54
# Grammarly checked
msgid "HEADLINE_PHOTOSYNTHESIS_LOCATION"
msgstr "## Place of photosynthesis"

#: pages/photosynthesis.py:57
#: EINFÜHRUNG.py:55
# Grammarly checked
msgid "PHOTOSYNTHESIS_LOCATION_EXPLANATION"
msgstr "Photosynthesis takes place in the cells of the primarily green components of plants, mainly within mesophyl cells. Chloroplast organelles within these cells perform the conversion of light energy into chemical energy equivalents, which is commonly called 'light reaction'. Within the series of protein complexes used for this energy conversion, two types of photosystems exist. Both contain chlorophyll reaction centers, which, upon light absorption, are able to oxise compounds with high redox potential (e.g. H₂O) and reduce acceptors with low redox potential (e.g. NADP⁺). Photosystem II (PSII), which uses the energy of light to split water into oxygen and protons, is of particular interest to us."

#: pages/photosynthesis.py:68
#: EINFÜHRUNG.py:43
# Grammarly checked
msgid "CAPTION_FOTOSYNTHESE_APPARAT_PICTURE"
msgstr "Complexes within the thylakoid membrane, which are necessary for photosynthesis."

#: pages/photosynthesis.py:51
# Grammarly checked
msgid "PHOTOSYNTHESIS_LOCATION_CONTINUE"
msgstr "After the chloroplast takes up light, the captured energy is used in the cytoplasm to fix CO₂ and produce the primary product 3-phosphoglycerate, which is then further metabolised into other carbohydrates and compounds. This is a multi-step process called the Calvin cycle whereby the comples Ribulose 1,5 Carboxylase Oxygenase (RuBisCO) catalyses the first CO₂-fixation step.\nThe following video visualises the different macromolecular scales of photosynthesis in a very simplified manner:"

#: pages/photosynthesis.py:75
#: EINFÜHRUNG.py:59
msgid "HEADLINE_NPQ"
msgstr "## How to deal with too much light?"

#: pages/photosynthesis.py:76
#: EINFÜHRUNG.py:60
# Grammarly checked
msgid "NPQ_EXPLANATION"
msgstr "If the photosystems absorb too much light energy, protein breakdown and cellular damage by producing radical oxygen species can ensue. Therefore, multiple preventive mechanisms exist to reduce high light damage, ranging from the adaption of the photosystems to the movement of chloroplasts and whole leaves. Processes on the scale of the photosystems are acting the fastest and usually result in light energy being directly emitted as heat. Such processes are collectively called non-photochemical quenching (NPQ). The following pages will present the model representing the plant 'Xanthophyll cycle', where the enzymatic interconversion of carotenoids leads to a system with tunable light absorption for dissipation as heat."

#: pages/photosynthesis.py:78
#: pages/1 Messmethode.py:40
msgid "HEADER_MODEL_ORGANISMEN"
msgstr "## One plant to rule them all"

#: pages/photosynthesis.py:79
#: pages/1 Messmethode.py:40
# Grammarly checked
msgid "MODEL_ORGANISMEN_EXPLANATION"
msgstr "While the presented methods and models are applicable for a wide range of plants, most were developed for the model plant *Arabidopsis Thaliana*."

#: pages/photosynthesis.py:81
#: pages/1 Messmethode.py:40
# Grammarly checked
msgid "EXPANDER_MODEL_ORGANISMEN"
msgstr "Why is Arabidopsis thaliana a model organism?"

#: pages/photosynthesis.py:85
#: pages/1 Messmethode.py:40
# Grammarly checked
msgid "CAPTION_THAIANA_PICTURE"
msgstr "A photograph of a plant of the wild type of the model organism _Arabidopsis thaliana_."

#: pages/photosynthesis.py:87
# Grammarly checked
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION"
msgstr "<em>Arabidopsis</em> (<em>Arabidopsis thaliana</em>) is referred to as a model organism because it is often used as a model system in plant biology. It has several characteristics that make it well-suited for laboratory studies, including:\n"
"1. Small size and fast life cycle: <em>Arabidopsis thaliana</em> has a short life cycle that allows researchers to study multiple generations in a relatively short period of time.\n"
"2. Simple anatomy: The structure of the plant is simple and well-understood, making it easier for researchers to study specific developmental processes.\n"
"3. Genome sequencing: The complete genome of <em>Arabidopsis thaliana</em> was the first plant genome to be sequenced, which has provided researchers with a wealth of genetic information about the plant.\n"
"4. Genetic and molecular tools: A large collection of genetic and molecular tools are available for <em>Arabidopsis thaliana</em>, which enables researchers to study plant development, growth, and stress responses at the cellular and molecular levels. \n"
"\n All these factors have made <em>Arabidopsis thaliana</em> an important model organism for studying basic plant biology, and its insights have contributed to our understanding of the biology of all plants."

#: pages/1 Messmethode.py:50
msgid "LITERATURE_PHOTOSYNTHESIS"
msgstr "References on this page:\n"
"- Cook, J., Oreskes, N., Doran, P. T., Anderegg, W. R. L., Verheggen, B., Maibach, E. W., Carlton, J. S., Lewandowsky, S., Skuce, A. G., Green, S. A., Nuccitelli, D., Jacobs, P., Richardson, M., Winkler, B., Painting, R., & Rice, K. (2016). Consensus on consensus: A synthesis of consensus estimates on human-caused global warming. Environmental Research Letters, 11(4), 048002. https://doi.org/10.1088/1748-9326/11/4/048002"

#: pages/method.py:10
#: pages/1 Messmethode.py:30
msgid "HEADLINE_ONE"
msgstr "# Measuring method"

#: pages/method.py:15
#: Explanation by Tobias
# Grammarly checked
msgid "INTRODUCTION_MEASUREMENT"
msgstr "To quantitatively measure the photosynthetic acitivity of plants, non-invasive fluorescence-based methods have been developed. While gas measurements are difficult to perform in the field, fluorescence measurements can be performed on plants of various sizes and in various environments and allow for real-time evaluation of *in vivo* photosynthesis dynamics. Indeed, the currently developed FLEX project of the european space agency aims at performing photosynthesis measurements on a global scale using satellite-driven fluorescence metering (https://earth.esa.int/eogateway/missions/flex)."

#: pages/method.py:18
#: EINFÜHRUNG.py:36
# Grammarly checked
msgid "CAPTION_ABB1"
msgstr "Photo of a plant of a plant (_Spathiphyllum_): On the left in daylight, in the middle illuminated by a commercial UV5 lamp, on the right also illuminated by a UV5 lamp, but through a filter which filters all wavelengths except for the red light."

#: pages/method.py:20
#: Explanation by Tobias
msgid "GROWING_PLANTS_1"
msgstr "Chlorophyll fluorescence"

#: pages/method.py:22
#: Explanation by Tobias
# Grammarly checked
msgid "INTRODUCTION_GLOWING"
msgstr "Fluorescence measurements of plants are based on the properties of excited chlorophyll. While a significant fraction of light energy is used for photochemistry, excitations can also be dissipated as heat or fluorescence in the red wavelength spectrum."

#: pages/method.py:23
#: Explanation by Tobias
# Grammarly checked
msgid "PLANT_ARE_SHINING_RED"
msgstr "Stray environmental light, especially the green fraction reflected by the leaf, usually masks the fluorescence from observation.  Therefore, one way to overcome this limitation is by inducing strong fluorescence and reducing the stray light."

#: pages/method.py:24
#: Explanation by Tobias
# Grammarly checked
msgid "INTRODUCTION_EXPERIMENT"
msgstr "In the following example, we used a powerful UV light source for chlorophyll excitation and covered the camera with a red-pass filter to limit light detection to the fluorescence range. We, also, initially covered part of the leaf with a sticker to restrict the high light adaption to the non-covered tissue."

#: pages/method.py:30
#: Explanation by Tobias
# Grammarly checked
msgid "EXPLANATION_VIDEO"
msgstr "The covered parts of the leaf reduced the energy transfer onto the photosystems by inducing NPQ and, therefore, lessened (quenched) the fluorescence output. Upon removal of the sticker, however, the covered tissue without induced light protection received intense illumination, producing a strong fluorescence response. As the edge of the sticker forms a sharp border region between high and low fluorescence regions, the after-image of the sticker is clearly visible. As the previously covered tissue induces a high light response, the after-image fades over time.\n Therefore, this experiment visualises both chlorophyll fluorescence and the leaf adaption to light."

#: pages/method.py:32
#: Explanation by Tobias
msgid "MEASURING_FLUORESZENZ"
msgstr "Measuring Photosynthesis with Fluorescence"

#: pages/method.py:33
#: Explanation by Tobias
# Grammarly checked
msgid "EXPLANATION_MEASUREMENT_1"
msgstr "The above experiment also visualised the inverse relationship between fluorescence and the remaining dissipation modes of chlorophyll excitation. By measuring fluorescence, therefore, NPQ and photochemical quenching can also be metered. Additionally, high-light saturating light pulses lead to a 'closing' of PSII reaction centres where the electron donation to the following electron acceptor plastoquinone is much slower than the rate of incoming, exciting photons. This output limitation leads buildup of electrons inside the photosystem and, ultimately, a blockage of photochemical quenching. Therefore, quantifying the fluorescence of closed photosystems allows for inferring non-photochemical quenching."

#: pages/method.py:34
#: Explanation by Tobias
# Grammarly checked
msgid "INTRODUCTION_PHI"
msgstr "However, the fluorescence intensity is also proportional to the intensity of the incoming light. Therefore, the signal must be normalised to obtain the fraction of incoming energy dissipated as fluorescence, deemed the fluorescence yield. Pulse Amplitude Modulation (PAM, illustrated below) is one method to quantify this yield. PAM allows fluorescence yield measurements over time and under changing light conditions (dark, light, saturating, and others). By relating measurements within a PAM protocol and observing the fluorescence dynamics, photosynthetic parameters like the photosynthetic efficiency 'ΦPSII' and NPQ can be quantified."

#: pages/method.py:37
#: Explanation by Tobias

msgid "MEASURING_LIGHT_FLUORESCENCE"
msgstr "Basic principles of measuring chlorophyll fluorescence with PAM"

#: pages/method.py:38
#: Explanation by Tobias
# Grammarly checked
msgid "EXPLANATION_INTRODUCTION_ATTEMPTS"
msgstr "PAM employs a series of high-frequency light pulses with weak constant intensity, the measuring light (ML), to quantify the fluorescence yield. The pulses are too weak to induce significant photosynthetic activity but induce measurable fluorescence. As the exact timing of these measuring pulses is known, signal amplification through a lock-in amplifier selectively measures the fluorescence response to the constant-intensity pulses, which is proportional to the fluorescence yield (Schreiber, 2004).\n\nThe following figure visualises the explained principles. The fluorescence yield measured throughout a typical PAM experiment can be seen in the bottom panel. The protocol involves a dark-adapted plant being exposed to weak constant ('actinic') light (AL, white area shown in the light bar, L), followed by dark recovery, where the light is switched off completely (black area in L). Multiple saturating light flashes (saturation pulses, SP) are applied before, during, and after the actinic illumination to measure the maximal fluorescence Fm, Fm', Fm'', respectively. These fluorescence features are used in the quantification of fluorescence parameters.\nThe upper half of the figure explains in more detail the fluorescence behaviour of chlorophyll: Light energy absorption brings chlorophyll molecules to the first excited state (S1, see the simplified Jablonsky diagram in the upper panel on the left). For chlorophylls to return to the ground state (S0), the absorbed energy can be used for charge separation and photosynthesis (photochemical quenching, qP), dissipated as heat (non-photochemical quenching, NPQ), or re-emitted as fluorescence. The fluorescence emission spectra are red-shifted from the absorption spectra (upper panel on the right). Therefore, the fluorescence can be detected using fluorometers with corresponding optical filters, and their signal will not be mistaken for the irradiant light. The emitted fluorescence signal is recorded with key readouts, as shown in the lower panel. This summary figure is reproduced from Nies et al. (2021)."

#: pages/method.py:41 pages/method.py:61
#: pages/1 Messmethode.py:47
msgid "CAPTION_ABB2"
msgstr "Top) Schematic representation of the main principles behind chlorophyll a fluorescence and PAM experiment.\n Bottom) Example Graph of a PAM measurement"

#: pages/method.py:43
#: pages/1 Messmethode.py:32
# Grammarly checked
msgid "HEADLINE_PAM_MEASUREMENT"
msgstr "### PAM Experiments"

#: pages/method.py:43
#: pages/1 Messmethode.py:32
# Grammarly checked
msgid "INTRODUCTION_PAM_MEASUREMENT"
msgstr "In the following, we will give a short explanation of the Pulse Amplitude Modulation method for the quantification of photosynthesis. For more a in-depth overview, please consider the literature at the bottom of the page."

#: pages/method.py:46
#: Explanation by Tobias
msgid "SATURATING_PULSES"
msgstr "Saturating Pulses"

#: pages/method.py:47
#: Explanation by Tobias
# Grammarly checked
msgid "EXPLANATION_ATTEMPTS"
msgstr "You need to know one more aspect of PAM: the saturating pulses. Our machine gives the plant a very intense light pulse every few seconds, overloading its photosynthetic machinery. In this state, the measuring light is fully converted into fluorescence, and we measure the maximal fluorescence yield 'Fm'. While the standard fluorescence yield depends on the plant's photosynthesis, the Fm does not. So by comparing normal and maximal yield, we can tell apart changes in and outside photosynthesis, for example, the plant's light protection. When you also apply protocols of differently colored lights, you can calculate the previously mentioned ΦPSII, NPQ, and many other values. But how that is done goes much too far. Most important is that you understand that we compare what fraction of light is currently turned to fluorescence, how much at maximum, and how these measurements change over time and conditions."

#: pages/method.py:49
#: pages/1 Messmethode.py:40
msgid "HEADLINE_ILLUSTRATION"
msgstr "## Visualization of the results"

#: pages/method.py:50
#: pages/1 Messmethode.py:42
# Grammarly checked
msgid "EXPLANATION_ILLUSTRATION_UNITS"
msgstr "The fluorescence signal (y-axis) is plotted against time (x-axis). Visible peaks are the fluorescence emitted in response to the saturating pulse of light. Each peak is referred to as Fm', with the first being measured in the dark as Fm."

#: pages/method.py:51
#: pages/1 Messmethode.py:44
# Grammarly checked
msgid "EXPLANATION_ILLUSTRATION"
msgstr "This was a lot of theory for just a bit of shining, so try a measurement out for yourself on the **Experiments *in silico* ** page!"

#: pages/model_explain.py:16
#: pages/1 Messmethode.py:30
msgid "HEADLINE_COMPUTATIONAL_MODELS"
msgstr "# Computational models"

#: pages/model_explain.py:10
#: pages/1 Messmethode.py:30
# Grammarly checked
msgid "HEADLINE_MODEL"
msgstr "## What are mathematical models?"

#: pages/model_explain.py:12
#: EINFÜHRUNG.py:60
# Grammarly checked
msgid "MATHEMATICAL_MODELLING_EXPLANATION_1"
msgstr "Mathematical modeling involves creating mathematical models for use in various fields of research and industry. It is beneficial when traditional testing methods are too expensive and time-consuming. The language of **mathematics** enables us to translate real processes, situations, and problems into general statements using equations. This translation is yet to be one-to-one and imposes a certain level of **simplification**. Therefore, models are never a precise description, including all levels of details, but a simplification created with rigid methods for a specific study. The problem described using mathematical terms is then solved using mathematical techniques, today enormously aided with **computational** programs. The resulting solution is then applied to the real-world problem and evaluated. If additional solutions are required, the mathematical model must be revised. That way, the model development process is often not linear but an iterative cycle, as presented in the figure below."

#: pages/model_explain.py:15

msgid "CAPTION_MODELLING_PICTURE"
msgstr "The cycle of modeling. The developer often needs to go through several iterations to get from an initial problem to a curated mathematical model."

#: pages/model_explain.py:17
#: pages/model.explain.py:17

msgid "MATHEMATICAL_MODELLING_EXPLANATION_1b"
msgstr "In the video below, you can listen more about building and using mathematical models in biology."

#: pages/model_explain.py:22
msgid "EXAMPLE_MATHEMATICAL_MODEL"
msgstr "### An example of a mathematical model"

#: pages/model_explain.py:28
#: pages/model_explain.py:25
msgid "TAB_SIR"
msgstr "The SIR model"

#: pages/model_explain.py:28
msgid "TAB_MANUAL"
msgstr "Manual implementation"

#: pages/model_explain.py:28
msgid "TAB_MODELBASE"
msgstr "Modelbase implementation"

#: pages/model_explain.py:40
msgid "HEADLINE_SIR"
msgstr "#### The SIR Model"

#: pages/model_explain.py:28
msgid "HEADLINE_MANUAL"
msgstr "#### Manual implementation"

#: pages/model_explain.py:28
msgid "HEADLINE_MODELBASE"
msgstr "#### Modelbase implementation"

#: pages/model_explain.py:23
#: pages/model.explain.py:23
#: EINFÜHRUNG.py:60
# Grammarly checked
msgid "MATHEMATICAL_MODELLING_EXAMPLE"
msgstr "Let us imagine a scenario where a new highly contagious but overall harmless disease gets introduced to a population of aliens on Planet-X. This disease has surprised the people of Planet-X so that they separated their population into three categories: the ones that are susceptible to the disease and can get sick at any moment (S), the ones that recovered from the infection (R), and the currently infected ones (I). To model the transition between each category, we determine the rate of infection (v<sub>1</sub>) dependent on the number of S and I in the total population (N) and their rate of recovery (v<sub>2</sub>) solely reliant on the I. They also discovered that the R gain complete immunity, but the people are too stressed to grow their population. To know how their population will look in a few months, they try a new method they heard from Earth about, namely **mathematical modeling**. To start, you should create a scheme for your problem; in this case, the S will become I at a rate of v<sub>1</sub>, and the I will become R at a rate of v<sub>2</sub>. The rate v<sub>1</sub> is dependent on the infection rate of the disease (β), the number of S and I in relation to the N. On the other hand, the rate v<sub>2</sub> is only dependent on the number of I and their recovery rate (γ)."

#: pages/model_explain.py:37
#: pages/model.explain.py:37
# Grammarly checked
msgid "MATHEMATICAL_MODELLING_EXAMPLE_2"
msgstr "With this scheme, you have already successfully modeled your problem; you just now have to be able to use it. To do that, you have to see what information you want to gather from your model, which is, in this case, the change in the population depending on the time. A handy mathematical tool to depict the change of something depending on the change of another specific value is the so-called Ordinary Differential Equation&nbsp;(ODE). Using differential equations, you can describe the relationship between the time and the change in the number of people in each category, so overall, there are three equations. This set of three equations is called a system of ODEs and will be solved numerically using an integrator. So let's apply this method to our example of Planet-X, first by creating the ODE system:"

#: pages/model_explain.py:52
#: pages/model.explain.py:52
# Grammarly checked
msgid "MATHEMATICAL_MODELLING_EXAMPLE_3"
msgstr "To effectively solve each ODE, it is crucial to consider the rates involved. With a predetermined scheme, one can determine which rate corresponds to removing or adding certain compounds. By using integration, one can calculate the amount of each compound at any given time and depict the change over time when doing so for multiple time points. Let's apply this method to the disease on Planet-X. According to the scientists, the infection rate is (β&nbsp;=&nbsp;2), and the recovery rate is (γ&nbsp;=&nbsp;0.2). With these values and starting populations of (S&nbsp;=&nbsp;900), (I&nbsp;=&nbsp;100), (R&nbsp;=&nbsp;0), and (N&nbsp;=&nbsp;S&nbsp;+&nbsp;I&nbsp;+&nbsp;R&nbsp;=&nbsp;1000), we can solve our ODE system. The resulting graph shows that the disease on Planet-X will eventually be irradicated on its own."

#: pages/model_explain.py:55
#: pages/model.explain.py:55
# Grammarly checked
msgid "CAPTION_SIR_RESULTS_PICTURE"
msgstr "The change in the population of Planet-X using the SIR model taken from Earth's scientists is depicted. The infection rate is set to (β&nbsp;=&nbsp;2) and the recovery rate to (γ&nbsp;=&nbsp;0.2). The starting populations are: (S&nbsp;=&nbsp;900), (I&nbsp;=&nbsp;100), (R&nbsp;=&nbsp;0), and (N&nbsp;=&nbsp;S&nbsp;+&nbsp;I&nbsp;+&nbsp;R&nbsp;=&nbsp;1000)"

#: pages\model_explain.py:61
# Grammarly checked
msgid "MATHEMATICAL_MODELLING_EXAMPLE_EXPERT"
msgstr "We have now successfully implemented and used a model of epidemiology. Such a model has been recently used as a basis for numerous more complex models to track the expansion of a virus spread in multiple populations across the globe. The simplicity of our use example makes it possible to be solved on pen and paper. However, we have used Python to make our lives easier. You can find it in the other tabs over this section."

#: pages/model_explain.py:63
msgid "HEADLINE_MODEL_PHOTOSYNTHESIS"
msgstr "## Models of photosynthesis"

#: pages/model_explain.py:69
msgid "HEADLINE_FVCB"
msgstr "### The Farquhar, von Caemmerer and Berry model"

#: pages/model_explain.py:71
msgid "FVCB_1"
msgstr "The FvCB model is a purely mathematical tool used to depict photosynthesis in C<sub>3</sub> plants by calculating their carbon assimilation (A). It was first created in 1980 by Graham Farquhar, Susanne von Caemmerer, and Joseph Berry and has since undergone many different variations and updates. The most basic version uses four equations, each depicting the A with a specific limiting rate. These include the RuBisCO limited rate (Ac), the electron transport limited rate (Aj), and the triphosphate limited rate (Ap), where the minimum of the three is taken as the end-resulting A. These equations include several different parameters that can be measured or estimated beforehand. This step is crucial as it gives life to the model, and by varying these, you alter the model's results."

#: pages/model_explain.py:87
msgid "FVCB_2"
msgstr "These rates use an epitome of parameters that have to be measured or determined beforehand. The model uses the chloroplast CO<sub>2</sub> partial pressure (C<sub>c</sub>), the chloroplast O<sub>2</sub> partial pressure (O), the C<sub>c</sub> where A = −R<sub>d</sub> (Γ<sub>&midast;</sub>), the maximal rate of carboxylation (V<sub>cmax</sub>), the Michaelis-Menten constants of carboxylation and oxygenation (K<sub>c</sub> and K<sub>o</sub> respectively), the potential electron transport rate (J) and the rate of inorganic phosphate supply to the chloroplast (T<sub>p</sub>) to calculate the three rates. The day respiration (R<sub>d</sub>) is subtracted to portray the respective assimilation rates. It is to be noted that this model is limited to a C<sub>c</sub> that is larger than Γ<sub>&midast;</sub>. \n"
"\n This model is widely popular among scientists, as it is relatively simple and uses no complicated mathematical methods like integrations. As you may have guessed, this model type differs from the SIR model we explained earlier. It doesn’t use any ODEs and, therefore, cannot show the change in time. It only shows the A specific for the parameter values chosen. It thus depicts the plant photosynthesis in a steady state. This state is achievable for the plant systems themselves, but due to the many fluctuations of environmental conditions, it is never achieved in nature. This is why this model is not the most accurate representation of photosynthesis. However, it is still considered one of the best due to its simplicity."

#: pages/model_explain.py:90
msgid "HEADLINE_E_PHOTOSYNTHESIS"
msgstr "### The *e*-photosynthesis model"

#: pages/model_explain.py:92
# Grammarly checked
msgid "E_PHOTOSYNTHESIS_1"
msgstr "The *e*-photosynthesis model aims to provide a realistic representation of photosynthesis. Like the SIR model, it uses an ODE system with more complicated equations and compounds. Since photosynthesis is a convoluted mechanism, this model strives to include most components while simplifying where necessary. It builds upon previous works by Zhu et al., incorporating the reactions associated with light absorption, excitation energy transfer, charge separation, and electron transfer around PSII from their fluorescence induction model. Additionally, it introduces analogous reactions for PSI and includes reactions from their carbon metabolism model, such as those involved in the C<sub>3</sub> cycle, sucrose and starch synthesis, and photorespiration. The model further accounts for ion transfer between the lumen and stroma, ATP and NADPH synthesis, RuBisCO activation by RuBisCO activase, NPQ by luminal pH and the xanthophyll cycle, and regulation of enzyme activities by the ferredoxin (Fd) thioredoxin system.\n"
"\n Even though this model is very complex, it still introduces some simplifications; for example, the steps between the electron transfer of the chlorophyll *a* molecule and Fd are ignored. Furthermore, to calculate the A, this model uses the rate of carboxylation (V<sub>c</sub>) and the rate of glycine decarboxylase (v<sub>131</sub>). While the equation below may be simple, it depends on a dynamic system containing 294 equations."

#: pages/model_explain.py:102
msgid "E_PHOTOSYNTHESIS_2"
msgstr "Overall, 113 of these equations can be attributed to a system of ODEs, which indicates this model's complexity. Though the model's intricacy makes it less popular than others, it shows promising results in accounting for various factors that affect photosynthesis. Therefore, it is usually used as a reference for simpler, more user-friendly models or focusing on specific photosynthesis aspects."

#: pages/model_explain.py:105
msgid "HEADLINE_BELLASIO"
msgstr "### The Bellasio model"

#: pages/model_explain.py:107
# Grammarly checked
msgid "BELLASIO_1"
msgstr "The Bellasio model is a dynamic C<sub>3</sub> photosynthesis model that combines light and dark reactions with stomatal behavior. Its main objective is to provide a generalized photosynthesis model for C<sub>3</sub> plants that is easily accessible and user-friendly. The model aggregates three specific models, which have been modified and simplified. The light reactions are based on Yin et al.'s work, the dark reactions on Zhu et al.'s carbon metabolism model, and the stomatal conductance of Bellasio et al.'s hydro-mechanical formulation. It simplifies the intercellular space and mesophyll as uniform, calculates CO<sub>2</sub> diffusion, dissolution, and hydration mechanistically, and does not implement the restriction caused by metabolite diffusion. Furthermore, it uses the simple FvCB Formula to calculate A."

#: pages/model_explain.py:109
# Grammarly checked
msgid "BELLASIO_2"
msgstr "The parameters are based on averaged literature values for typical parameters, and the few parameters created for this model are derived from the original equations or assigned plausible values. The model includes the major reactions of photosynthesis and is simple enough to be modeled in a spreadsheet program like Microsoft&reg; Excel&reg;, which the author kindly provided. Overall, this model is an excellent starting point for scientists who wish to model photosynthesis, even if they lack experience with dynamic models."

#: pages/model_explain.py:210
msgid "EXPANDER_C3C4CAM"
msgstr "The difference between C3, C4 and CAM plants"

#: pages/model_explain.py:211
msgid "HEADLINE_C3"
msgstr "### C<sub>3</sub> Plants"

#: pages/model_explain.py:212
# Grammarly checked
msgid "C3_1"
msgstr "Most plants are C<sub>3</sub> plants, meaning the first stable compound produced during carbon fixation is a three-carbon molecule called 3-phosphoglycerate (3-PGA). This process takes place in the mesophyll cells of plant leaves and involves a chain of biochemical reactions that transform carbon dioxide (CO<sub>2</sub>) into carbohydrates like glucose."

#: pages/model_explain.py:214
msgid "HEADLINE_C4"
msgstr "### C<sub>4</sub> Plants"

#: pages/model_explain.py:215
# Grammarly checked
msgid "C4_1"
msgstr "In certain plants, C<sub>4</sub> photosynthesis is an alternative process that developed to adapt to hot and dry environments. Unlike C<sub>3</sub> photosynthesis, C<sub>4</sub> photosynthesis boosts the efficiency of carbon fixation by concentrating CO<sub>2</sub> near RuBisCO in the bundle sheath cells. This separation lowers photorespiration, a wasteful process that can occur in C<sub>3</sub> plants under high temperatures and low CO<sub>2</sub> concentrations. C<sub>4</sub> photosynthesis can be found in various plant families, such as grasses (e.g., maize, sugarcane) and certain dicots (e.g., Amaranthaceae, Chenopodiaceae). It is an adaptation that permits plants to flourish in environments with high temperatures, intense sunlight, and limited water availability."

#: pages/model_explain.py:217
msgid "HEADLINE_CAM"
msgstr "### CAM Plants"

#: pages/model_explain.py:218
# Grammarly checked
msgid "CAM_1"
msgstr "A specialized form of photosynthesis called CAM (Crassulacean Acid Metabolism) is found in plants adapted to arid and water-limited environments. These plants have a unique way of separating carbon fixation and the Calvin cycle, which involves opening their stomata at night to take in carbon dioxide and fixing it as a four-carbon organic acid, such as malate or malic acid, to store it in large vacuoles within their cells. During the day, they close their stomata to prevent water loss through transpiration and release the CO2 from the malate into the chloroplasts to be used in the Calvin Cycle, similar to C<sub>3</sub> plants. The name of this photosynthetic pathway, \"Crassulacean Acid Metabolism,\" was derived from the Crassulaceae plant family, where it was first discovered. Still, it is also present in other plant families like succulents, cacti, bromeliads, and some orchids. These types of plants are commonly found in desert regions and other areas with limited water resources."

#: pages/model_explain.py:65
msgid "HEADLINE_EXPERIMENTS"
msgstr "# Experiments *in silico*"

#: pages/model_explain.py:65
msgid "HEADLINE_MODEL_CONSTRUCTION"
msgstr "## Model construction"

#: pages/model_explain.py:67
#: Grammarly checked
msgid "CONSTRUCTION_EXPLANATION_1"
msgstr "Photosynthesis is a complex process involving numerous players: proteins, enzymes, electron carriers, proton pumps, ion channels, and many more. Although each plays an essential role in the overall process, we aimed at maximal reduction of the model complexity for the light-memory study. Therefore, we have focused solely on the pH-regulated, non-photochemical processes associated with photosystem II. We included only those processes that directly affect or regulate the extent of NPQ, as shown on the scheme below."

#: pages/model_explain.py:67
#: 
msgid "CAPTION_MODEL_NPQ"
msgstr "Scheme of the components included in the simplified mathematical model used on this website. The model has been developed back in 2016 and contains a detailed description of internal processes occurring inside photosystem II (PSII), including processes that affect the quencher dynamics (Psbs and zeaxanthin)."

#: pages/model_explain.py:67
#: Grammarly checked
msgid "CONSTRUCTION_EXPLANATION_2"
msgstr "So, instead of modeling the whole plant or chloroplast, we applied a cycle of reduction (see Figure) based on a strict reductionist approach and managed to represent the model as a system of only six ordinary differential equations! Each of the equations represents the dynamic rate of change in:"

#: pages/model_explain.py:68
#: Anna's explanation of the model
msgid "RATES_1"
msgstr "1) the reduced fraction of the plastoquinone pool (PQH<sub>2</sub>)"

#: pages/model_explain.py:69
#: Anna's explanation of the model
msgid "RATES_2"
msgstr "2) the stromal concentration of ATP (ATP),"

#: pages/model_explain.py:70
#: Anna's explanation of the model
msgid "RATES_3"
msgstr "3) the luminal proton concentration (H),"

#: pages/model_explain.py:71
#: Anna's explanation of the model
msgid "RATES_4"
msgstr "4) the fraction of nonprotonated proteins (PsbS),"

#: pages/model_explain.py:72
#: Anna's explanation of the model
msgid "RATES_5"
msgstr "5) the fraction of violaxanthin in the total pool of xanthophylls (Vx),"

#: pages/model_explain.py:73
#: Anna's explanation of the model
msgid "RATES_6"
msgstr "6) the fraction of active ATPase enzyme (ATPase<sup>&midast;</sup>)."

#: pages/model_explain.py:76
#: Anna's explanation of the model
msgid "HEADLINE_MODEL_EQUATIONS"
msgstr "### Mathematical equations"

#: pages/model_explain.py:77
#: Anna's explanation of the model
msgid "MODEL_EQUATIONS_INTRODUCTION"
msgstr "The six coupled ordinary differential equations (ODE)"

#: pages/model_explain.py:91
#: Anna's explanation of the model
msgid "REACTION_RATES"
msgstr "Reaction rates"

#: pages/model_explain.py:92
#: Anna's explanation of the model
msgid "RATES_DYNAMIC"
msgstr "###### Reaction rates used in the dynamic description of the system"

#: pages/model_explain.py:106
#: Anna's explanation of the model
msgid "RATE_QUENCHER"
msgstr "###### Reaction rates to calculate the quencher activity and the overall rate"

#: pages/model_explain.py:117
#: Anna's explanation of the model
msgid "HEADLINE_IMPLEMENTATION"
msgstr "### Implementation"

#: pages/model_explain.py:119
#: Grammarly checked
msgid "IMPLEMENTATION_DESCRIPTION"
msgstr "The mathematical model of the photosynthetic electron transport chain was implemented in the object-oriented language (OOL) Python using the modelbase package. The code containing differential equations, reaction rates, parameter space, and initial conditions used for the simulations is publicly available from [here](www.github.com/QTB-HHU/npqmodel). In the dropdown below, you can also look at a step-by-step guide on implementing it yourself."

#: pages/model_explain.py:149
# Grammarly checked
msgid "SIR_IMPLEMENTATION_MANUAL_1"
msgstr "Great care needs to be taken for the `y0` vector to align with the unpacked variable names and the respective differential equations. The same holds for the order of the parameters `beta` and `gamma`. But we still get a similar result when plotting it using the code below:"

#: pages/model_explain.py:158
msgid "SIR_IMPLEMENTATION_MANUAL_2"
msgstr "Clearly this way of writing models is very error-prone and hard to modularise. That's why we can improve on the situation by using `modelbase`."

#: pages/model_explain.py:177
msgid "SIR_IMPLEMENTATION_MODELBASE_1"
msgstr "First, we are going to factor out the rate functions `infection` and `recovery` as plain Python functions."

#: pages/model_explain.py:181
msgid "SIR_IMPLEMENTATION_MODELBASE_2"
msgstr "Next, we can build the model. For this we supply all our system variables using `add_compounds` and parameters as a dictionary using `add_parameters`"

#: pages/model_explain.py:181
# Grammarly checked
msgid "SIR_IMPLEMENTATION_MODELBASE_3"
msgstr "Lastly, we add the transitions using `add_reaction_from_args`, supplying:\n"
"1. A name for the transition\n"
"2. A reference to the rate function\n"
"3. Stoichiometries, encoding how the rate affects the system variables\n"
"4. The arguments for the rate function"

#: pages/model_explain.py:189
# Grammarly checked
msgid "SIR_IMPLEMENTATION_MODELBASE_4"
msgstr "From this, modelbase will automatically assemble a system of ODEs ready to be studied. To help minimize minor oversights, modelbase will check for typical inconsistencies during this process and display appropriate warnings.\n"
"\n You can then easily simulate and plot the system like below, which will give you the graph you may have seen beforehand:"

#: pages/model_explain.py:210
# Grammarly checked
msgid "SIR_IMPLEMENTATION_MODELBASE_5"
msgstr "The approach's strength lies in its simplicity of extending models. For instance, we can add a compartment for deceased individuals to the SIR model, also known as the SIRD model, by introducing a new variable, parameter, and reaction:"

#: pages/model_explain.py:214
msgid "SIR_IMPLEMENTATION_MODELBASE_6"
msgstr "Which would have been a lot more cumbersome with the manual approach."

#: pages/first_analysis.py:97
#: pages/2 Daten-Analyse.py:123
#: pages/Analyse.py:123
msgid "MEASUREMENT_PHASE"
msgstr "Measuring phase"

#: pages/first_analysis.py:177
#: pages/2 Daten-Analyse.py:23
#: pages/Analyse.py:23
msgid "HEADLINE_ANALYSE"
msgstr "## The data analysis"

#: pages/first_analysis.py:178
# Grammarly checked
msgid "INTRODUKTION"
msgstr "Now that you have been introduced to the measurement method for checking NPQ on plants, we will carry out measurements with the model to estimate the influence of the abiotic influence factors. In the following the model can be rerun with different parameters using the sliders.\n\n The graph will display the fluorescence as an orange line during an initial dark phase (blue background) and a following light phase (orange background) with choosable intensity. Saturating light pulses are given at the beginning of the dark phase and in the light, which you can see as spikes in the fluorescence signal. With the sliders, you can adjust the light instensity during the light phase, for how long the simulation will run, how far apart in time the saturation pulses will be, and how fast the activation and deactivation rates of the NPQ adaption process are."

#: pages/first_analysis.py:193
#: pages/Analyse.py:
msgid "HEADLINE_SLIDER"
msgstr "##### Use of the sliders:"

#: pages/first_analysis.py:194
# Grammarly checked
msgid "EXPLANATNION"
msgstr "First, change the sliders according to the test you want to simulate. Then, start the calculation by clicking on the button. The calculated graph will be displayed. When you change the sliders again, the graph disappears, and you can load a new graph."

#: pages/first_analysis.py:196
#: pages/2 Daten-Analyse.py:29
#: pages/Analyse.py:29
msgid "TIPP1"
msgstr "***Tip 1:*** *If you want to compare two experiments, you can download the graphs by right clicking on them.*"

#: pages/first_analysis.py:197
#: pages/2 Daten-Analyse.py:31
#: pages/Analyse.py:31
msgid "TIPP2"
msgstr "***Tip 2:*** *By clicking on the stop in the upper right corner, you can cancel the calculation process.*"

#: pages/first_analysis.py:203 pages/plant_memory.py:286
msgid "SLIDER_LIGHT"
msgstr "Light intensity of light phase in μmol m⁻² s⁻¹"

#: pages/first_analysis.py:211 pages/plant_memory.py:291
msgid "SLIDER_TIME"
msgstr "Test duration in minutes"

#: pages/first_analysis.py:216
#: pages/2 Daten-Analyse.py:60
#: pages/Analyse.py:60
msgid "SLIDER_PULSES"
msgstr "Seconds between saturating pulse during light phase"

#: pages/first_analysis.py:222
msgid "SLIDER_ACTIVATION"
msgstr "Conversion rate to Zeaxanthin in ± percent of default"

#: pages/first_analysis.py:168
msgid "SLIDER_DARKLENGTH"
msgstr "Length of the dark phase in seconds"

#: pages/first_analysis.py:181
msgid "SLIDER_SATURATE"
msgstr "Light intensity of saturating pulse in μmol m⁻² s⁻¹"

#: pages/first_analysis.py:247 pages/plant_memory.py:326
#: pages/2 Daten-Analyse.py:83
#: pages/Analyse.py:83
msgid "SPINNER"
msgstr "I'll do some quick math for you :computer:"

#: pages/plant_memory.py:173
#: pages/3 Pflanzengedächtnis.py:122
msgid "PHASE1"
msgstr "Training phase"

#: pages/plant_memory.py:173
#: pages/3 Pflanzengedächtnis.py:122
msgid "PHASE2"
msgstr "Dark phase"

#: pages/plant_memory.py:173
#: pages/3 Pflanzengedächtnis.py:122
msgid "PHASE3"
msgstr "Memory phase"

#: pages/plant_memory.py:188
#: pages/3 Pflanzengedächtnis.py:122
msgid "AXIS_TIME_MIN"
msgstr "Time [min]"

#: pages/plant_memory.py:228 pages/plant_memory.py:239 pages/first_analysis.py:112
#: pages/Analyse.py:72
msgid "AXIS_TIME_S"
msgstr "Time [s]"

#: pages/plant_memory.py:229 pages/plant_memory.py:240 pages/furst_analysis.py:134
#: pages/Analyse.py:72
msgid "FLUO"
msgstr "Fluorescence [F´ₘ /Fₘ]"

#: pages/first_analysis.py:217
msgid "AXIS_NPQ"
msgstr "NPQ [a.u.]"

#: pages/first_analysis.py:230
msgid "AXIS_PHIPSII"
msgstr "Φ(PSII)"

#: pages/plant_memory.py:262
#: pages/3 Pflanzengedächtnis.py:36
msgid "HEADLINE_BRAIN"
msgstr "# Plant Light Memory"

#: pages/plant_memory.py:269
# Grammarly checked
msgid "INTRODUCTION_BRAIN"
msgstr "Since you have found out how plants react to different light intensities, we have news for you! Plants can be trained to enhance their photoprotection. It has been observed experimentally that plants previously exposed to light react differently to light than those exposed to light for the first time! This phenomenon is sometimes called **short-term light memory* and we know now which molecular mechanism causes this effect. We have used this knowledge to represent the behavior with a mathematical model. Now, you can perform your own **memory experiments**. Go ahead; you can simulate different scenarios using the two sliders below. Do you see how the fluorescence signal differs between different experiment phases? If you want to play even more, click the **Expert** version on the left."

#: pages/plant_memory.py:278
#: pages/3 Pflanzengedächtnis.py:40
msgid "TIP1"
msgstr "***Tip 1:*** *If you want to compare two experiments, you can download the graphs by clicking on the three dots.*"

#: pages/plant_memory.py:280
#: pages/3 Pflanzengedächtnis.py:42
msgid "TIP2"
msgstr "***Tip 2:*** *By clicking on the stop in the upper right corner, you can cancel the calculation process.*"

#: pages/conclusion.py:12
#: Conclusion
msgid "HEADLINE_CONCLUSION"
msgstr "# Take Home Messages"

#: pages/conclusion.py:12
# Grammarly checked
msgid "CONCLUSION_TEXT_ONE"
msgstr "We hope you have received a thorough introduction to the captivating realm of (computational) plant biology through this website. By examining diagrams made with computer models, you have gained knowledge about the impact of light intensity on photosynthesis and delved into the subject of plant short-term memory. We hope we could show you the following:\n"
"- Light intensity significantly affects the rate of photosynthesis in plants. As light intensity increases, the rate of photosynthesis increases to some degree.\n"
"- The relationship between light intensity and photosynthetic rate is not linear. Rather, it follows a curve that peaks at a certain saturation point, like in the figure below."

#: pages/conclusion.py:18
# Grammarly checked     
msgid "CONCLUSION_TEXT_TWO"
msgstr "- Plants can recall previous exposure to light and adjust their photosynthetic rates accordingly. This short-term memory enables them to absorb light energy and adapt to various environmental conditions efficiently.\n"
"- We believe that the measurement of PAM is an exciting and effective method to learn about the intricate mechanisms underlying plant growth and development.\n" 
"\n Finally, please consider these findings and their broader implications for our comprehension of the natural world. By doing so, you will be able to recognize and admire the remarkable intricacy and magnificence of the plant kingdom.\n\n Computational models exist for almost all scientific disciplines, and even considering only photosynthesis models, we have barely scratched the surface of what is out there. Hopefully, this small course has shown you how interesting and useful modeling can be. For a problem in the future, you will think, '*Could a model help me with this*?'.\n\n **But most of all, we hope you had fun with our course. If you want, give us feedback and tell others about your experience. Have a great day!**"

#: pages/Analyse.py:72
msgid "SLIDER_DEACTIVATION"
msgstr "Conversion rate to Violaxanthin in ± percent of default"

#: EINFÜHRUNG.py:22
msgid "AUTHOR"
msgstr ""

#: EINFÜHRUNG.py:24
msgid "MOTIVATION"
msgstr ""

#: EINFÜHRUNG.py:26
msgid "PROCESS"
msgstr ""

#: EINFÜHRUNG.py:28
msgid "CONTINUING_TASK"
msgstr ""

#: EINFÜHRUNG.py:30
msgid "MOTIVATION_2.0"
msgstr ""

#: EINFÜHRUNG.py:32
msgid "DECLARATION"
msgstr ""

#: Lisa's introduction
msgid "EXPANDER_CLIMATE"
msgstr ""

#: EINFÜHRUNG.py:36
msgid "EXPANDER_PRODUCENTEN"
msgstr ""

#: EINFÜHRUNG.py:37
msgid "EXPANDER_PRODUCENTEN_EXPLANATION"
msgstr ""

#: EINFÜHRUNG.py:39
msgid "EXPANDER_NUTRIENTS"
msgstr ""

#: EINFÜHRUNG.py:40
msgid "EXPANDER_NUTRIENTS_EXPLANATION"
msgstr ""

#: EINFÜHRUNG.py:42
msgid "EXPANDER_PHOTOSYNTHESIS"
msgstr ""

#: EINFÜHRUNG.py:43
msgid "EXPANDER_PHOTOSYNTHESIS_EXPLANATION_1"
msgstr ""

#: EINFÜHRUNG.py:43
msgid "EXPANDER_PHOTOSYNTHESIS_EXPLANATION_2"
msgstr ""

#: EINFÜHRUNG.py:54
msgid "EXPANDER_PHOTOSYNTHESIS_LOCATION"
msgstr ""

#: EINFÜHRUNG.py:55
msgid "EXPANDER_PHOTOSYNTHESIS_LOCATION_EXPLANATION"
msgstr ""

#: EINFÜHRUNG.py:59
msgid "EXPANDER_NPQ"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_NPQ_EXPLANATION"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_NPQ_VIOLAXIN_EXPLANATION"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_MATHEMATICAL_MODELLING"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_MATHEMATICAL_MODELLING_EXPLANATION_1"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_MATHEMATICAL_MODELLING_EXPLANATION_2"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_DIFFERENTIAL_EQUATIONS"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_DIFFERENTIAL_EQUATIONS_EXPLANATION_1"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_DIFFERENTIAL_EQUATIONS_EXPLANATION_2"
msgstr ""

#: EINFÜHRUNG.py:60
msgid "EXPANDER_DIFFERENTIAL_EQUATIONS_EXPLANATION_3"
msgstr ""

#: EINFÜHRUNG.py:64
msgid "CREDITS_ANNA"
msgstr ""

#: pages/1 Messmethode.py:50
msgid "INTRODUCTION_LITERATURE"
msgstr ""

#: Conclusion
msgid "BEGIN_OF_CONCLUTION"
msgstr ""

#: Conclusion
msgid "CONCLUTION_POINT_1"
msgstr ""

#: Conclusion
msgid "CONCLUTION_POINT_2"
msgstr ""

#: Conclusion
msgid "CONCLUTION_POINT_3"
msgstr ""

#: Conclusion
msgid "END_OF_CONCLUTION"
msgstr ""

#: Explanation by Tobias
msgid "GROWING_PLANTS_2"
msgstr ""

#: Explanation by Tobias
msgid "EXPLANATION_MEASUREMENT_2"
msgstr ""

#: pages/1 Messmethode.py:40
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION_1"
msgstr ""

#: pages/1 Messmethode.py:40
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION_PONT1"
msgstr ""

#: pages/1 Messmethode.py:40
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION_PONT2"
msgstr ""

#: pages/1 Messmethode.py:40
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION_PONT3"
msgstr ""

#: pages/1 Messmethode.py:40
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION_PONT4"
msgstr ""

#: pages/1 Messmethode.py:40
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION_2"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EXPANDER_MODEL_EQUATIONS"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EXPANDER_MODEL_EQUATIONS_EXPLANATION"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EQUATION_LIST_1"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EQUATION_LIST_2"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EQUATION_LIST_3"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EQUATION_LIST_4"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EQUATION_LIST_5"
msgstr ""

#: pages/1 Messmethode.py:44
msgid "EQUATION_LIST_6"
msgstr ""

#: Explanation by Tobias
msgid "MEASURING_FLUORESCENCE"
msgstr ""

#: Explanation by Tobias
msgid "MEASURING_LIGHT_FLUORESZENZ"
msgstr ""

#: pages/model.explain.py:58
# Grammarly checked
msgid "MATHEMATICAL_MODELLING_EXAMPLE_SIMPLE"
msgstr ""

#: pages/model_explain.py:122
#: Anna's explanation of the model
msgid "IMPLEMENTATION_TO_EXPERT"
msgstr ""

#: pages/model_explain.py:240
msgid "MODEL_CODE_EXPANDER"
msgstr "Step-by-Step Guide of Implementation"

#: pages/model_explain.py:241
msgid "CONSTRUCTION_HEADER"
msgstr "#### Model Construction"

#: pages/model_explain.py:
# Grammarly checked
msgid "CONSTRUCTION_1"
msgstr "Here, you can read a step-by-step guide on implementing the model used on this website. We will use the package `modelbase`, as it will make everything simpler than utilizing a Python integrator from scratch. To see the difference, go back to the **Computational Models** page, where you will see the same model being built using both methods.\n" 
"\n If you want to follow along, you can copy each code block and paste them into a Python IDE. At the end, you will have a complete model. The first thing we need to do with the `modelbase` package is define our model with the `Model()` class:"

#: pages/model_explain.py:249
# Grammarly checked
msgid "CONSTRUCTION_2"
msgstr "We must look at the **reaction rates** and the **ODEs** we want to implement into our model. With them, we can decide which **parameters** and **compounds** we need. We must define them in a `dict` and `list`, respectively. It is also good practice to use comments after each value to briefly explain what that variable represents and, if present, the unit." 

#: pages/model_explain.py:265
# Grammarly checked
msgid "CONSTRUCTION_3"
msgstr "The defined model has integrated functions to add the parameters and compounds easily:" 

#: pages/model_explain.py:272
# Grammarly checked
msgid "CONSTRUCTION_4"
msgstr "This model also uses some **parameters** that are derived from other parameters. Furthermore, some information is hidden behind the connection between compounds, which cannot be summarised as parameters. However, `modelbase` has some tricks to overcome these two problems, `derived_parameters` and `algebraic_modules` respectively. We must first define the calculations as functions and then add them to the model." 

#: pages/model_explain.py:290
# Grammarly checked
msgid "CONSTRUCTION_5"
msgstr "We now have given the model all the building blocks it needs, but it needs to know what to do with them. For that, it needs instructions. We must translate the reaction rates into `functions` to make these instructions. You will see that some of these functions also call other functions. These are only to make the code more legible or to eliminate the same calculations." 

#: pages/model_explain.py:308
# Grammarly checked
msgid "CONSTRUCTION_6"
msgstr "The model has all the necessary components and instructions. Still, we must specify which building block corresponds to each instruction and how they are connected. We need to examine the ODEs and establish the stoichiometry to accomplish this." 

#: pages/model_explain.py:315
# Grammarly checked
msgid "CONSTRUCTION_7"
msgstr "We have now successfully created a functional model. However, to test it, we need to simulate it. This section will guide you through the step-by-step process of generating the plot with the default values listed at the bottom of this page. This part may be more complicated than the modeling part, requiring some trial and error. We will explain our thought process so that you can follow along. Still, we suggest you carefully read this section to create the plot successfully." 

#: pages/model_explain.py:317
msgid "SIMULATION_HEADER"
msgstr "#### Model Simulation" 

#: pages/model_explain.py:319
msgid "SIMULATION_1"
msgstr "First, let's check if our plot is functional. To do so, we will generate a `simulator` object by utilizing the `Simulator()` class from `modelbase`." 

#: pages/model_explain.py:326
# Grammarly checked
msgid "SIMULATION_2"
msgstr "The model requires a starting point for its calculations. The parameters have been defined during the model creation, so we now need to specify the initial concentrations or quantities of the compounds." 

#: pages/model_explain.py:326
# Grammarly checked
msgid "SIMULATION_3"
msgstr "We can begin the simulations now. Let's select a random time point for the model to simulate to. We can visualize the results after the simulation and check for implementation errors. This test is straightforward, as an empty or non-existent plot indicates a problem. Our preferred plotting tool is `matplotlib`, which is also integrated into `modelbase`." 

#: pages/model_explain.py:356
# Grammarly checked
msgid "SIMULATION_4"
msgstr "We have successfully simulated our model and created a basic plot. However, the plot must include important details that we need to define. These aspects include:\n"
"\n - Displaying changes in fluorescence over time\n"
"\n - Including an initial dark phase followed by a light phase\n"
"\n - Showing saturating light pulses at the beginning of each phase and at specific intervals during the light phase\n"
"\n To address these issues, we will tackle each one individually. We recommend replacing the code at each new step that includes the `matplotlib` import at the top if you follow this guide. You will notice many similarities throughout the process." 

#: pages/model_explain.py:357
msgid "SIMULATION_FLOURESCENCE_HEADER"
msgstr "##### Showing Fluorescence" 

#: pages/model_explain.py:358
# Grammarly checked
msgid "SIMULATION_FLOURESCENCE_1"
msgstr "When using `modelbase` for simulations, it tends to display the compounds in the default plots. However, in our situation, we need to showcase the change of Fluorescence, which we did not incorporate as a compound but as an algebraic module. Hence, we must choose that change specifically." 

#: pages/model_explain.py:381
# Grammarly checked
msgid "SIMULATION_FLOURESCENCE_2"
msgstr "To simplify the chart reading process, we will relativize the fluorescence values to their maximum. Unfortunately, this will result in a more complex code. We will demonstrate how to achieve this by extracting the simulation data from `modelbase`. However, there are several methods to accomplish this. It is worth noting that the graph will appear slightly different due to `modelbase` modifying certain plot aspects for faster processing. Nonetheless, we will ensure the diagram is aesthetically pleasing in the end." 

#: pages/model_explain.py:404
msgid "SIMULATION_PHASES_HEADER"
msgstr "##### Different Phases and Saturating Pulses" 

#: pages/model_explain.py:405
# Grammarly checked
msgid "SIMULATION_PHASES_1"
msgstr "We can address the last two issues in one code by starting each phase with a saturating pulse. However, we need to make some decisions regarding:\n"
"\n - The duration of our simulation\n"
"\n - The brightness level of the dark and light phases, as well as the saturating pulses\n"
"\n - The length of the dark phase\n"
"\n - The number of saturating pulses we want during the light phase.\n"
"\n The code below displays our selected values, but feel free to use your preferred values and observe the outcome. This is what this website also makes more straightforward for you at the bottom of the page." 

#: pages/model_explain.py:428
msgid "SIMULATION_PRETTY_HEADER"
msgstr "##### Making It Pretty" 

#: pages/model_explain.py:429
# Grammarly checked
msgid "SIMULATION_PRETTY_1"
msgstr "The simulation currently displays all the desired information. To enhance its visual appeal and comprehension, we can utilize the `matplotlib` library to create a polished graph resembling the one at the bottom of the page. While we won't provide a detailed walkthrough, you can still view the code we used." 

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "KONTROLL"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "INTRODUCTION_QUESTION"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "QUESTION_1"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "AW1"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "AW2"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "RA1"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "RA2"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "QUESTION_2"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "AW3"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "AW4"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "AW5"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "RA3"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "RA4"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "QUESTION_3"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "AW6"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "AW7"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "RA5"
msgstr ""

#: pages/first_analysis.py:247
#: pages/Analyse.py:123
msgid "RA6"
msgstr ""

#: pages/first_analysis.py:247
msgid "CAPTION_DEFAULT_SLIDERS"
msgstr "Simulation graph with default values."

#: pages/plant_memory.py:273

msgid "TASK_MEMORY_1_EXPLANATION"
msgstr ""

#: pages/plant_memory.py:276

msgid "TASK_MEMORY_2_EXPLANATION"
msgstr ""

#: pages/Analyse.py:123
msgid "STOPP"
msgstr ""

#: pages/Analyse.py:123
msgid "RESULTS"
msgstr ""

#: pages/Analyse.py:123
msgid "EXPLANATION_RESULTS"
msgstr ""


msgid "EXPANDER_MATHEMATICAL_MODELLING_EXAMPLE"
msgstr ""


msgid "MATHEMATICAL_MODELLING_EXAMPLE_cont"
msgstr ""


msgid "INTRO_MODEL"
msgstr ""

