# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR ORGANIZATION
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-12-02 17:21+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: pygettext.py 1.5\n"

# SIDEBAR
msgid "SIMPLE"
msgstr "Simple"

msgid "ADVANCED"
msgstr "Advanced"

################################### MISC ###################################################

#: EINFÜHRUNG.py:
msgid "LANGUAGE"
msgstr "Language"

#: pages/3 Pflanzengedächtnis.py:97
msgid "START_BUTTOM"
msgstr "Start the tests"

#: pages/1 Messmethode.py:49
msgid   "LITERATURE"
msgstr  "Literature"

#: pages/1 Messmethode.py:50
msgid   "LITERATURE_DECLARATION"
msgstr  "The following literature provides more in-depth information on the subject of PAM measurements, or offers the opportunity to familiarize oneself with the basics."

msgid	"CAPTION_PAM"
msgstr	"Schematic representation of the main principles behind chlorophyll a fluorescence and PAM experiment."

#: EINFÜHRUNG.py:36
msgid "HEADLINE_PRODUCENTEN"
msgstr "#### Consumers vs producers"

#: EINFÜHRUNG.py:37
msgid "PRODUCENTEN_EXPLANATION"
msgstr "By a **consumer** we mean living beings that feed on biomass produced by other living beings. All living beings that can produce biomass are called **producers**. These include, in particular, plants. These can produce biomass independently through photosynthesis, for example."

##############################################################################################

################################### START ##################################################

#: Start.py:10
msgid "HEADLINE_MAIN"
msgstr "# Photosynthesis *in silico*: an Interactive Dashboard to Study Photosynthesis using a Computational Model"

#: Start.py:11
msgid "INTRO"
msgstr "This is a Teaching Tool in Biology, a project launched by the **Computational Life Science Lab** at the RWTH Aachen University, Germany. Our goal is to provide a teaching tool applicable to the needs of XXI-century students. We want to show how computational modeling supports the current research in increasing our understanding of how the world works. We have selected photosynthesis as THE process to demonstrate it. In the end, photosynthesis is arguably the most important process on Earth! Why don't you start your adventure with this interactive dashboard by listening about the process of photosynthesis."

#: Start.py:15
msgid "HEADLINE_USAGE"
msgstr "#### How to use this website"

#: Start.py:16
msgid "USAGE"
msgstr "We aimed at both curious **newcomers** and more **advanced** learners. At any point of using this website you can choose which version you want to use by clicking on the left side button: Version and selecting from the drop-down list *Simple* or *Advanced*."

#: Start.py:17
msgid "ADVANCED_USE"
msgstr "If you do decide to choose the *Advanced* version, you will not only learn about photosynthesis as a process, but also about methods how to measure its dynamics and how to calculate its efficiency using computer. You will also learn how to 'genetically modify' your photosynthetic organism to perform new set of experiments, meaning you will get to create a digital mutant. We call the work performed in computer in silico."

#: Start.py:18
msgid "DROP_BOX_INTRO"
msgstr "If you don't know the difference between the *in vitro*, *in vivo* and *in silico*, open the drop-box below."

#: Start.py:23
msgid "EXPANDER_IN"
msgstr "Differences between in vitro, in vivo and in silico"

#: Start.py:24
msgid "EXPLANATION_IN_VITRO"
msgstr "*In vitro* refers to experiments conducted outside a living organism in a controlled laboratory setting."

#: Start.py:25
msgid "EXPLANATION_IN_VIVO"
msgstr "In vivo refers to experiments conducted inside a living organism, usually animals or humans."

#: Start.py:26
msgid "EXPLANATION_IN_SILICO"
msgstr "In silico refers to computational experiments and simulations performed using computer models and algorithms."

##############################################################################################

################################### PHOTOSYNTHESIS #########################################

#: pages/photosynthesis.py:10
msgid "HEADLINE_CLIMATE"
msgstr "#### Climate change"

#: pages/photosynthesis.py:11
msgid "INTRODUCTION_CLIMATE_CHANGE"
msgstr "*Climate* itself is defined as the average statistical measurements of the weather over a long period in a certain place. *Climate change* is defined as a worldwide change in the climate. Three main categories can induce a change in climate:"

#: pages/photosynthesis.py:14
msgid "POINT_1"
msgstr "- plate tectonics and vulcanism"

#: pages/photosynthesis.py:15
msgid "POINT_2"
msgstr "- earth orbit transitions"

#: pages/photosynthesis.py:16
msgid "POINT_3"
msgstr "- emissions of heat-trapping gasses"

#: pages/photosynthesis.py:17
msgid "END_OF_INTRODUCTION"
msgstr "In the history of the Earth, several times climate changes occurred. In 2016, *97% of climate researchers* agreed that currently we are in a human-caused global warming [Cook], and research is needed to understand the impact of the sudden rise of Earth Temperature."

#: pages/photosynthesis.py:32
msgid "HEADLINE_PHOTOSYNTHESIS"
msgstr "#### Photosynthesis"

#: pages/photosynthesis.py:33
msgid "PHOTOSYNTHESIS_EXPLANATION_1"
msgstr "Just like humans, plants need nutrients for their growth. The most essential of these are water and minerals, but plants also need fats, carbohydrates and proteins. Most of these nutrients plants can absorb from the soil through their roots, but not all of them. As already mentioned, plants are producers and can therefore manufacture nutrients. These nutrients include, in particular, carbohydrates, which are produced during photosynthesis."

#: pages/photosynthesis.py:34
msgid "PHOTOSYNTHESIS_EXPLANATION_2"
msgstr "In photosynthesis, plants produce biomass in the form of glucose. To do this, they need CO₂, H₂O and energy in the form of light. [Here](https://www.youtube.com/watch?v=68b1HAIfX08) you can find out more about the process of photosynthesis."

#: pages/photosynthesis.py:44
msgid "CAPTION_FOTOSYNTHESE_PICTURE"
msgstr "Photosynthesis process"

#: pages/photosynthesis.py:47
msgid "HEADLINE_NUTRIENTS"
msgstr "#### Nutrient intake"

#: pages/photosynthesis.py:48
msgid "NUTRIENTS_EXPLANATION"
msgstr "Plants take up the necessary CO₂ for photosynthesis from the air through leaf openings, the stomata."

#: pages/photosynthesis.py:52
msgid "CAPTION_STOMATA_PICTURE"
msgstr "Microscopic image of a stomatal of the wild type of the model organism Arabidopsis thaliana."

#: pages/photosynthesis.py:56
msgid "HEADLINE_PHOTOSYNTHESIS_LOCATION"
msgstr "#### Place of photosynthesis"

#: pages/photosynthesis.py:57
msgid "PHOTOSYNTHESIS_LOCATION_EXPLANATION"
msgstr "Photosynthesis takes place in the cells of the mostly green components of plants. In these cells are specialized organelles the chloroplasts. There, the part of photosynthesis takes place, which is called the light reaction. The so-called photosystems are located in the membrane. Photosystem II (PSII), which uses the energy of light to split water into oxygen and hydrogen, is of particular interest to us. "

#: pages/photosynthesis.py:68
msgid "CAPTION_FOTOSYNTHESE_APPARAT_PICTURE"
msgstr "Complexes within the thylakoid membrane, which are necessary for photosynthesis."

#: pages/photosynthesis.py:75
msgid "HEADLINE_NPQ"
msgstr "#### How to deal with too much light?"

#: pages/photosynthesis.py:76
msgid "NPQ_EXPLANATION"
msgstr "What actually happens when too much light and thus excess energy hits the Photosystem II? Does it break down and then have to be renewed by the cell? Fortunately not! Instead, the excess energy can be released in the form of heat or used for ATP synthesis. In this way, the cell can be protected. The two non-photochemical protective mechanisms are referred to as NPQ."

#: pages/photosynthesis.py:78
msgid   "HEADER_MODEL_ORGANISMEN"
msgstr  "#### One plant to rule them all"

#: pages/photosynthesis.py:79
msgid   "MODEL_ORGANISMEN_EXPLANATION"
msgstr  "Often, when you try to find out something about plants in general, like how photosynthesis works, the experiments are performed on the species *Arabidopsis Thaliana*, a 'model organism'."

#: pages/photosynthesis.py:81
msgid   "EXPANDER_MODEL_ORGANISMEN"
msgstr  "Why is Arabidopsis thaliana a model organism?"

#: pages/photosynthesis.py:85
msgid   "CAPTION_THAIANA_PICTURE"
msgstr  "A photograph of a plant of the wild type of the model organism **Arabidopsis thaliana**."

#: pages/photosynthesis.py:87
msgid "EXPANDER_MODEL_ORGANISM_EXPLANATION"
msgstr "<em>Arabidopsis</em> (<em>Arabidopsis thaliana</em>) is referred to as a model organism because it is often used as a model system in plant biology. It has several characteristics that make it well suited for laboratory studies, including:\n"
"1. Small size and fast life cycle: <em>Arabidopsis thaliana</em> has a short life cycle that allows researchers to study multiple generations in a relatively short period of time.\n"
"2. Simple anatomy: The structure of the plant is simple and well-understood, making it easier for researchers to study specific developmental processes.\n"
"3. Genome sequencing: The complete genome of <em>Arabidopsis thaliana</em> was the first plant genome to be sequenced, which has provided researchers with a wealth of genetic information about the plant.\n"
"4. Genetic and molecular tools: A large collection of genetic and molecular tools are available for <em>Arabidopsis thaliana</em>, which enables researchers to study plant development, growth, and stress responses at the cellular and molecular levels. \n"
"\nAll these factors have made <em>Arabidopsis thaliana</em> an important model organism for studying basic plant biology, and its insights have contributed to our understanding of the biology of all plants."

##############################################################################################

################################### MEASURING METHOD #######################################

#: pages/method.py:10
msgid "HEADLINE_ONE"
msgstr "# Measuring photosynthesis"

#: pages/method.py:15
msgid "INTRODUCTION_MEASUREMENT"
msgstr "On the previous page, you learned about the importance of photosynthesis and how it works. But how do we know how **photosynthetically active** an organism is? On this page you will learn how can we measure the dynamics of photosynthesis in real time using light (precisely fluorescence) measuring devices. As biology is continously becoming a more quantitative science, obviously numerous methods to probe photosynthesis exist. For example, as plants produce oxygen and take up carbon dioxide, photosynthesis can be measured by how fast these gasses are produced or consumed. However, metering gasses can be tricky, especially if you want to do it outside on a tree or in a field. Therefore a particularly important characteristic of photosynthetic organisms is essential in providing alternative methods of measuring photosynthesis *in vivo*!"

#: pages/method.py:18
msgid "CAPTION_ABB1"
msgstr "Photo of a plant of a plant (_Spathiphyllum_): On the left in daylight, in the middle illuminated by a commercial UV5 lamp, on the right also illuminated by a UV5 lamp, but through a filter which filters all wavelengths except for the red light."

#: pages/method.py:20
msgid "GROWING_PLANTS_1"
msgstr "Plant shine!"

#: pages/method.py:22
msgid "INTRODUCTION_GLOWING"
msgstr "Here is where a specialty of plants comes into play: They can re-emit light and in proper conditions shine! When light shines on leaves, they use majority of the light to run complex photochemical reactions of photosynthesis, but a small part of the absorbed light is reemitted. Something similar happens when your white T-shirt shines purple in a disco's black light. When something shine in a different light color when illuminated, this is called 'fluorescence'. And the plant's fluorescence shine is red."

#: pages/method.py:23
msgid "PLANT_ARE_SHINING_RED"
msgstr "Now you might think: 'But plants are green, and I have never seen one fluoresce!'. And, of course, this is right. Plants don't absorb green light and instead reflect it, which we see as their primary color. Their red shine, however, is much fainter than that, and with stronger light coming into our eyes from all directions, we just can't see it."

#: pages/method.py:24
msgid "INTRODUCTION_EXPERIMENT"
msgstr "We, therefore, prepared a small experiment for you: Here, we covered a small portion of a plant's leaf with a sticker with the RWTH letters and will now shine a strong light on it. The camera's red filter helps us ignore distracting light and focus on the red fluorescence. Now watch what happens:"


#: pages/method.py:30
msgid "EXPLANATION_VIDEO"
msgstr "Did you see the red shine and the sticker's ghostly imprint on the leaf? You just saw the plant's adaptation in action. Because the plant cannot move, it must adjust to its surroundings. A lot of light arrived at the leaf's parts not covered by the sticker. Because that light could be harmful, the plant quickly produced some chemicals acting as a kind of sunscreen within the cells. After a few seconds, these cells were protected and received less light and fluoresced less. But, when we lifted the sticker, the cells below had not produced sunscreen. They saw the intense light and fluoresced at full force - right next to their protected neighbors. This sharp difference in fluorescence you saw as the stickers after-image. And as we continued shining the lamp, all cells adapted to it, vanishing the picture on the leaf."

#: pages/method.py:32
msgid "MEASURING_FLUORESZENZ"
msgstr "Measuring Photosynthesis with Fluorescence"

#: pages/method.py:33
msgid "EXPLANATION_MEASUREMENT_1"
msgstr "This experiment showed you the shine of plants and how amazingly they can adjust to the light. But how can this help with testing photosynthesis? A lot, actually. Because not only the 'sunscreen' affects leaf fluorescence, but many other factors do, too. If you are interested in how this happens, look into the :blue[Advanced] section. Let's say for now how strongly the plant photosynthesizes also has an effect on the strength of the reemitted light signal."

#: pages/method.py:34
msgid "INTRODUCTION_PHI"
msgstr "So scientists invented a way to measure this fluorescence and track how it changes over time (you will hear about this 'PAM' later). With some clever maths behind it, they can then calculate a lot of the things we might be interested in: How healthy the leaf is, how much it protects itself from the light, and, most importantly, how it is doing photosynthesis. We name this last measurement 'ΦPSII', with the greek letter 'Psi', and you might see it along some of the graphs you will produce later. The higher it is, the better, as the plant is doing photosynthesis more efficiently."

#: pages/method.py:37
msgid   "MEASURING_LIGHT_FLUORESCENCE"
msgstr  "Basic principles of measuring chlorophyll fluorescence with PAM"

#: pages/method.py:38
msgid   "EXPLANATION_INTRODUCTION_ATTEMPTS"
msgstr  "In this one figure the basic principles behind the fluorescence and PAM experiment are explained. In the bottom panel you see results of the PAM experiments. Take a good look, cause in few minutes you will be producing similar results but not with a help of a fluorometer but your computer! So what do we see in this graph? It is a result of a special light protocol, where a dark-adapted plant is exposed to very weak, actinic light (AL, white area shown in the light bar, L) followed by dark recovery, where the light is switched off completely (black area in L). Multiple saturating light flashes (saturation pulses, SP) are applied before, during and after the actinic illumination to measure the maximal fluorescence Fm, Fm', Fm'', respectively. So why do we exactly see any effect? This is explained with the upper left scheme. Light energy absorption brings chlorophyll molecules to the first excited state (S1, see the simplified Jablonsky diagram in the upper panel on the left). For chlorophylls to return to the ground state (S0), the absorbed energy can be used for charge separation and photosynthesis (photochemical quenching, qP), dissipated as heat (non-photochemical quenching, NPQ), or re-emitted as fluorescence. And now, the most important part: the fluorescence emission spectra are red-shifted from the absorption spectra (upper panel on the right). This basically means that the fluorescence can be detected using fluorometers with corresponding optical filters and their signal will not be mistaken with the light that we actually shine on the plants. The emitted fluorescence signal is recorded, as shown in the lower panel with key readouts. It took us a long time to summarize everything on one figure only and this figure originates from our previous work (Nies et al. 2021)."

#: pages/method.py:41 pages/method.py:61
msgid   "CAPTION_ABB2"
msgstr  "Example Graph of a PAM measurement"

#: pages/method.py:43
msgid "INTRODUCTION_PAM_MEASUREMENT"
msgstr "###### Here, we will tell you about an exciting experiment researchers use to measure photosynthesis. The basis for this you have already heard of: Fluorescence. This experiment is called 'Pulse Amplitude Modulation', or 'PAM' for short. From the name, you can already deduce that we, as experimenters, 'modulate' (control) the 'amplitude' (intensity) of light flashes."

#: pages/method.py:46
msgid   "SATURATING_PULSES"
msgstr  "Saturating Pulses"

#: pages/method.py:47
msgid   "EXPLANATION_ATTEMPTS"
msgstr  "You need to know one more aspect of PAM, the saturating pulses. Our machine gives the plant a very intense light pulse every few seconds, overloading its photosynthetic machinery. In this state, the measuring light is fully converted into fluorescence, and we measure the maximal fluorescence yield 'Fm'. While the standard fluorescence yield depends on the plant's photosynthesis, the Fm does not. So by comparing normal and maximal yield, we can tell apart changes in and outside of photosynthesis, for example, the plant's light protection. When you then also apply protocols of differently colored lights, you can calculate the previously mentioned ϕPSII, NPQ, and many other values. But how that is done goes much too far. Most important is that you understand that we compare what fraction of light is currently turned to fluorescence, how much at maximum, and how these measurements change over time and conditions."

#: pages/method.py:49
msgid   "HEADLINE_ILLUSTRATION"
msgstr  "##### Visualization of the results"

#: pages/method.py:50
msgid   "EXPLANATION_ILLUSTRATION_UNITS"
msgstr  "Fluorescence signal (y-axis) is plotted against time (x-axis). Visible peaks are the fluorescence emitted in response to the saturating pulse of light. Each peak is referred to as Fm', with the first one being measured in the dark referred to  simply as Fm."

#: pages/method.py:51
msgid   "EXPLANATION_ILLUSTRATION"
msgstr  "This was a lot of theory for just a bit of shining, so try a measurement out for yourself on the next page!"

##############################################################################################

################################### COMPUTATIONAL MODELS #####################################

#: pages/model_explain.py:10
msgid "HEADLINE_MODEL"
msgstr "# Mathematical models"

#: pages/model_explain.py:12
msgid "MATHEMATICAL_MODELLING_EXPLANATION_1"
msgstr "Mathematical modeling involves creating mathematical models for use in various fields of research and industry. It is beneficial when traditional testing methods are too expensive and time-consuming. The language of **mathematics** enables us to translate real processes, situations, and problems into general statements using equations. This translation is yet to be one-to-one and imposes a certain level of **simplification**. Therefore, models are never the precise description, including all levels of details, but a simplification created with rigid methods for a specific study. The problem described using mathematical terms is then solved using mathematical techniques, today enormously aided with **computational** programs. The resulting solution is then applied to the real-world problem and evaluated. If additional solutions are required, the mathematical model must be revised. That way, the model development process is often not linear but an iterative cycle, as presented in the figure below."

#: pages/model_explain.py:15
msgid "CAPTION_MODELLING_PICTURE"
msgstr "The cycle of modeling. The developer often needs to go through several iterations to get from an initial problem to a curated mathematical model."

#: pages/model_explain.py:17
msgid "MATHEMATICAL_MODELLING_EXPLANATION_1b"
msgstr "In the video below, you can listen more about building and using mathematical models in biology."

#: pages/model_explain.py:22
msgid "EXAMPLE_MATHEMATICAL_MODEL"
msgstr "### An example of a mathematical model"

#: pages/model_explain.py:28
msgid "TAB_SIR"
msgstr "The SIR model"

#: pages/model_explain.py:28
msgid "TAB_MANUAL"
msgstr "Manual implementation"

#: pages/model_explain.py:28
msgid "TAB_MODELBASE"
msgstr "Modelbase implementation"

#: pages/model_explain.py:23
msgid "MATHEMATICAL_MODELLING_EXAMPLE"
msgstr "Let us imagine a scenario where a new highly contagious but overall harmless disease gets introduced to a population of aliens on Planet-X. This disease has surprised the people of Planet-X so that they separated their population into three categories, the ones that are susceptible to the disease and can get sick at any moment (S), the ones that recovered from the infection (R), and the currently infected ones (I). To model the transition between each category, we determine the rate of infection (v1) dependent on the number of S and I in the total population (N) and their rate of recovery (v2) solely reliant on the I (Equation 2). They also discovered that the R gain complete immunity, but the people are too stressed to grow their population. To know how their population will look in a few months, they try a new method they heard from Earth about, namely **mathematical modeling**. To start, you should create a scheme for your problem; in this case, the S will become I at a rate of v1, and the I will become R at a rate of v2."

#: pages/model_explain.py:37
msgid "MATHEMATICAL_MODELLING_EXAMPLE_2"
msgstr "With this scheme, you have already successfully modeled your problem; you just now have to be able to use it. To do that, you have to see what information you want to gather from your model, which is, in this case, the change in the population depending on the time. A handy mathematical tool to depict the change of something depending on the change of another specific value is the so-called Ordinary Differential Equation&nbsp;(ODE). If you have never seen what an ODE looks like, click the box Ordinary Differential Equations. Using differential equations, you can describe the relationship between the time and change in the number of people in each category, so overall, three equations. This set of three equations is called a system of ODEs and will be solved numerically using an integrator. So let's apply this method to our example of Planet-X, first by creating the ODE system:"

#: pages/model_explain.py:52
msgid "MATHEMATICAL_MODELLING_EXAMPLE_3"
msgstr "To effectively solve each ODE, it is crucial to consider the rates involved. With a predetermined scheme, one can determine which rate corresponds to removing or adding certain compounds. By using integration, one can calculate the amount of each compound at any given time and depict the change over time when doing so for multiple time points. Let's apply this method to the disease on Planet-X. According to the scientists, the infection rate is (β&nbsp;=&nbsp;2), and the recovery rate is (γ&nbsp;=&nbsp;0.2). With these values and starting populations of (S&nbsp;=&nbsp;900), (I&nbsp;=&nbsp;100), (R&nbsp;=&nbsp;0), and N&nbsp;=&nbsp;S&nbsp;+&nbsp;I&nbsp;+&nbsp;R&nbsp;=&nbsp;1000, we can solve our ODE system. The resulting graph shows that the disease on Planet-X will eventually be irradicated on its own."

#: pages/model_explain.py:55
msgid "CAPTION_SIR_RESULTS_PICTURE"
msgstr "The change in the population of Planet-X using the SIR model taken from Earth's scientists is depicted. The infection rate is set to (β&nbsp;=&nbsp;2) and the recovery rate to (γ&nbsp;=&nbsp;0.2)."

#: pages\model_explain.py:61
msgid "MATHEMATICAL_MODELLING_EXAMPLE_EXPERT"
msgstr "We have now successfully implemented and used a model of epidemiology. Such a model has been recently used as a basis for numerous more complex models to track the expansion of a virus spread in multiple populations across the globe. The simplicity of our use example, makes it possible to be solved on pen and paper. However, we have used the programming language Python to make our lives easier. You can find it in the other tabs over this section."

#: pages/model_explain.py:63
msgid "HEADLINE_MODEL_PHOTOSYNTHESIS"
msgstr "# Models of photosynthesis"

#: pages/model_explain.py:69
msgid "HEADLINE_FVCB"
msgstr "### The Farquhar, von Caemmerer and Berry model"

#: pages/model_explain.py:71
msgid "FVCB_1"
msgstr "The FvCB model is a purely mathematical tool used to depict photosynthesis in C3 plants by calculating their carbon assimilation (A). It was first created in 1980 by Graham Farquhar, Susanne von Caemmerer, and Joseph Berry and has since undergone many different variations and updates. The most basic version uses four equations, that each depicts the A with a specific limiting rate. These include the RuBisCO limited rate (Ac), the electron transport limited rate (Aj), and the triphosphate limited rate (Ap), where the minimum of the three is taken as the end-resulting A. These equations include several different parameters that can be measured or estimated beforehand. This step is very important as it gives life to the model, and by varying these, you vary the results of the model."

#: pages/model_explain.py:87
msgid "FVCB_2"
msgstr "These rates use an epitome of parameters that have to be measured or determined beforehand. The model uses the chloroplast CO<sub>2</sub> partial pressure (C<sub>c</sub>), the chloroplast O<sub>2</sub> partial pressure (O), the C<sub>c</sub> where A = −R<sub>d</sub> (Γ<sub>&midast;</sub>), the maximal rate of carboxylation (V<sub>cmax</sub>), the Michaelis-Menten constants of carboxylation and oxygenation (K<sub>c</sub> and K<sub>o</sub> respectively), the potential electron transport rate (J) and the rate of inorganic phosphate supply to the chloroplast (T<sub>p</sub>) to calculate the three rates. The day respiration (R<sub>d</sub>) is subtracted to portray the respective assimilation rates. It is to be noted that this model is limited to a C<sub>c</sub> that is larger than Γ<sub>&midast;</sub>. \n"
"\n This model is widely popular among scientists, as it is fairly simple and uses no complicated mathematical methods like integrations. As you may have guessed, this type of model is not the same as the SIR model we explained earlier. It doesn’t use any ODEs and therefore cannot show the change in time. It only shows the A specific for the parameter values chosen and therefore depicts the plant photosynthesis in a steady state. This state is achievable for the plant systems themselves, but due to the many fluctuations of environmental conditions, it is never achieved in nature. This is why this model is not the most accurate representation of photosynthesis. However, it is still regarded as one of the best due to its simplicity."

#: pages/model_explain.py:90
msgid "HEADLINE_E_PHOTOSYNTHESIS"
msgstr "### The *e*-photosynthesis model"

#: pages/model_explain.py:92
msgid "E_PHOTOSYNTHESIS_1"
msgstr "The *e*-photosynthesis model aims to provide a realistic representation of photosynthesis. Just like the SIR model, it uses an ODE system, but with a more complicated set of equations and compounds. Since photosynthesis is a convoluted mechanism, this model strives to include most of its components while also simplifying where necessary. It builds upon previous works by Zhu et al., incorporating the reactions that are associated with light absorption, excitation energy transfer, charge separation, and electron transfer around PSII from their fluorescence induction model. Additionally, it introduces analogous reactions for PSI and includes reactions from their carbon metabolism model, such as those involved in the C3 cycle, sucrose and starch synthesis, and photorespiration. The model further accounts for ion transfer between the lumen and stroma, ATP and NADPH synthesis, RuBisCO activation by RuBisCO activase, NPQ by luminal pH and the xanthophyll cycle, and regulation of enzyme activities by the ferredoxin (Fd) thioredoxin system.\n"
"\n Even though this model is very complex it still introduces some simplifications, for example, the steps between the electron transfer of the chlorophyll *a* molecule and Fd are ignored. Furthermore, to calculate the A, this model uses the rate of carboxylation (V<sub>c</sub>) and the rate of glycine decarboxylase (v<sub>131</sub>). While the equation below may be simple, it is dependent on a dynamic system containing a total of 294 equations."

#: pages/model_explain.py:102
msgid "E_PHOTOSYNTHESIS_2"
msgstr "Overall, 113 of these equations can be attributed to a system of ODEs, which indicates this model's complexity. Though the model's intricacy makes it less popular than others, it shows promising results in accounting for various factors that affect photosynthesis. Therefore, it is usually used as a reference for simpler models that are more user-friendly or that focus on specific aspects of photosynthesis."

#: pages/model_explain.py:105
msgid "HEADLINE_BELLASIO"
msgstr "### The Bellasio model"

#: pages/model_explain.py:107
msgid "BELLASIO_1"
msgstr "The Bellasio model is a dynamic C<sub>3</sub> photosynthesis model that combines light and dark reactions with stomatal behaviour. Its main objective is to provide a generalized photosynthesis model for C<sub>3</sub> plants that is easily accessible and user-friendly. The model is an aggregation of three specific models, which have been modified and simplified. The light reactions are based on Yin et al.'s work, the dark reactions on Zhu et al.'s carbon metabolism model, and the stomatal conductance of Bellasio et al.'s hydro-mechanical formulation. It simplifies the intercellular space and mesophyll as uniform, calculates CO<sub>2</sub> diffusion, dissolution, and hydration mechanistically, and does not implement the restriction caused by metabolite diffusion. Furthermore, it uses the simple FvCB Formula to calculate A."

#: pages/model_explain.py:109
msgid "BELLASIO_2"
msgstr "The parameters are based on averaged literature values for typical parameters, and the few parameters created for this model are derived from the original equations or assigned plausible values. The model includes the major reactions of photosynthesis and is simple enough to be modelled in a spreadsheet program like Microsoft&reg; Excel&reg;, which has also been kindly provided by the author themselves. Overall, this model serves as an excellent starting point for scientists who wish to model photosynthesis, even if they lack experience with dynamic models."

#: pages/model_explain.py:65
msgid "HEADLINE_MODEL_CONSTRUCTION"
msgstr "### Model construction"

#: pages/model_explain.py:67
msgid "CONSTRUCTION_EXPLANATION"
msgstr "Photosynthesis is a complex process involving numerous players: proteins, enzymes, electron carriers, proton pumps, ion channels, and many more. Although each plays an essential role in the overall process, we aimed at maximal reduction of the model complexity for the light-memory study. Therefore, we have focused solely on the pH-regulated, non-photochemical processes associated with photosystem II. We included only those processes that are directly affected by or regulate the extent of NPQ. So instead of modeling the whole plant or chloroplast, we applied a cycle of reduction (see Figure) based on a strict reductionist approach and managed to represent the model as a system of only six ordinary differential equations! Each of the equations represents the dynamic rate of change in:"

#: pages/model_explain.py:68
msgid "RATES_1"
msgstr "1) the reduced fraction of the plastoquinone pool (PQH<sub>2</sub>)"

#: pages/model_explain.py:69
msgid "RATES_2"
msgstr "2) the stromal concentration of ATP (ATP),"

#: pages/model_explain.py:70
msgid "RATES_3"
msgstr "3) the luminal proton concentration (H),"

#: pages/model_explain.py:71
msgid "RATES_4"
msgstr "4) the fraction of nonprotonated proteins (PsbS),"

#: pages/model_explain.py:72
msgid "RATES_5"
msgstr "5) the fraction of violaxanthin in the total pool of xanthophylls (Vx),"

#: pages/model_explain.py:73
msgid "RATES_6"
msgstr "6) the fraction of active ATPase enzyme (ATPaseΓ<sup>&midast;</sup>)."

#: pages/model_explain.py:76
msgid "HEADLINE_MODEL_EQUATIONS"
msgstr "### Mathematical equations"

#: pages/model_explain.py:77
msgid "MODEL_EQUATIONS_INTRODUCTION"
msgstr "The six coupled ordinary differential equations (ODE)"

#: pages/model_explain.py:91
msgid "REACTION_RATES"
msgstr "Reaction rates"

#: pages/model_explain.py:92
msgid "RATES_DYNAMIC"
msgstr "###### Reaction rates used in the dynamic description of the system"

#: pages/model_explain.py:106
msgid "RATE_QUENCHER"
msgstr "###### Reaction rates to calculate the quencher activity and the overall rate"

#: pages/model_explain.py:117
msgid "HEADLINE_IMPLEMENTATION"
msgstr "### Implementation"

#: pages/model_explain.py:119
msgid "IMPLEMENTATION_DESCRIPTION"
msgstr "The mathematical model of the photosynthetic electron transport chain was implemented in the object oriented language (OOL) Python using modelbase package. The code containing differential equations, reaction rates, parameter space and initial conditions used for the simulations is publicly available from [here](www.github.com/QTB-HHU/npqmodel)."

#: pages/model_explain.py:149
msgid "SIR_IMPLEMENTATION_MANUAL_1"
msgstr "Great care needs to be taken in order for the `y0` vector to align with the unpacked variable names, as well as the respective differential equations. The same holds true for the order of the parameters `beta` and `gamma`. But we still get a similar result when plotting it using the code below:"

#: pages/model_explain.py:158
msgid "SIR_IMPLEMENTATION_MANUAL_2"
msgstr "Clearly this way of writing models is very error-prone and hard to modularise. That's why we can improve on the situation by using `modelbase`."

#: pages/model_explain.py:177
msgid "SIR_IMPLEMENTATION_MODELBASE_1"
msgstr "First, we are going to factor out the rate functions `infection` and `recovery` as plain Python functions."

#: pages/model_explain.py:181
msgid "SIR_IMPLEMENTATION_MODELBASE_2"
msgstr "Next, we can build the model. For this we supply all our system variables using `add_compounds` and parameters as a dictionary using `add_parameters`"

#: pages/model_explain.py:181
msgid "SIR_IMPLEMENTATION_MODELBASE_3"
msgstr "Lastly, we add the transitions using `add_reaction_from_args`, supplying:\n"
"1. a name for the transition\n"
"2. a reference to the rate function\n"
"3. stoichiometries, encoding how the rate affects the system variables\n"
"4. the arguments for the rate function"

#: pages/model_explain.py:189
msgid "SIR_IMPLEMENTATION_MODELBASE_4"
msgstr "From this, modelbase will automatically assemble a system of ODEs ready to be studied. To help minimise minor oversights, modelbase will check for typical inconsistencies during this process and display appropriate warnings.\n"
"\n"
"You can then easily simulate and plot the system like below, which will give you the graph you may have seen beforehand:"

#: pages/model_explain.py:210
msgid "SIR_IMPLEMENTATION_MODELBASE_5"
msgstr "The approach's strength lies in its simplicity of extending models. For instance, we can add a compartment for deceased individuals to the SIR model, also known as the SIRD model, by introducing a new variable, parameter, and reaction:"

#: pages/model_explain.py:214
msgid "SIR_IMPLEMENTATION_MODELBASE_6"
msgstr "Which would have been a lot more cumbersome with the manual approach."

###############################################################################################

################################### EXPERIMENTS IN SILICO #####################################

#: pages/first_analysis.py:97
msgid "MEASUREMENT_PHASE"
msgstr "Measuring phase"

#: pages/first_analysis.py:177
msgid "HEADLINE_ANALYSE"
msgstr "# The data analysis"

#: pages/first_analysis.py:178
msgid "INTRODUKTION"
msgstr "Now that you have been introduced to the measurement method for checking NPQ on plants, we will carry out measurements with the model to estimate the influence of the abiotic influence factors."

#: pages/first_analysis.py:182 pages/plant_memory.py:272
msgid "TASK_1"
msgstr "Task 1"

#: pages/first_analysis.py:182
msgid "TASK_ANALYSIS_1_EXPLANATION"
msgstr "First of all, only adjust the slider with the light intensity. What do you notice?"

#: pages/first_analysis.py:184 pages/plant_memory.py:275
msgid "TASK_2"
msgstr "Task 2"

#: pages/first_analysis.py:185
msgid "TASK_ANALYSIS_2_EXPLANATION"
msgstr "Now also changes the sliders for the duration of the experiment and the number of pulses. Describes the course of the curve, which arises when you connect the peaks of the pulses."

#: pages/first_analysis.py:186
msgid "TASK_3"
msgstr "Task 3"

#: pages/first_analysis.py:187
msgid "TASK_ANALYSIS_3_EXPLANATION"
msgstr "Compares the curve of the pulse peaks with the curve outside the pulses."

#: pages/first_analysis.py:188
msgid "TASK_4"
msgstr "Task 4"

#: pages/first_analysis.py:189
msgid "TASK_ANALYSIS_4_EXPLANATION"
msgstr "Try to interpret the observations. What do the changes at different light intensities mean for the plant?"

#: pages/first_analysis.py:190
msgid "TASK_5"
msgstr "Task 5"

#: pages/first_analysis.py:191
msgid "TASK_ANALYSIS_5_EXPLANATION"
msgstr "What light intensity does the plant cope best with?"

#: pages/first_analysis.py:193
msgid "HEADLINE_SLIDER"
msgstr "##### Use of the sliders:"

#: pages/first_analysis.py:194
msgid "EXPLANATNION"
msgstr "First change the sliders according to the test you want to simulate. Then start the calculation by clicking on the button. The calculated graph will be displayed. As soon as you change the sliders again, the graph disappears and you can load a new graph."

#: pages/first_analysis.py:196
msgid "TIPP1"
msgstr "***Tip 1:*** *If you want to compare two experiments, you can download the graphs by right clicking on them.*"

#: pages/first_analysis.py:197
msgid "TIPP2"
msgstr "***Tip 2:*** *By clicking on the stop in the upper right corner, you can cancel the calculation process.*"

#: pages/first_analysis.py:203 pages/plant_memory.py:286
msgid "SLIDER_LIGHT"
msgstr "Light intensity in μmol m⁻² s⁻¹"

#: pages/first_analysis.py:211 pages/plant_memory.py:291
msgid "SLIDER_TIME"
msgstr "Test duration in minutes"

#: pages/first_analysis.py:216
msgid "SLIDER_PULSES"
msgstr "Saturation pulses in the selected intervals in seconds"

#: pages/first_analysis.py:222
msgid "SLIDER_ACTIVATION"
msgstr "Conversion rate to Zeaxanthin in percent"

#: pages/first_analysis.py:247 pages/plant_memory.py:326
msgid "SPINNER"
msgstr "I'll do some quick math for you :computer:"

##############################################################################################

################################### PLANT LIGHT MEMORY #####################################

#: pages/plant_memory.py:173
msgid "PHASE1"
msgstr "Training phase"

#: pages/plant_memory.py:173
msgid "PHASE2"
msgstr "Dark phase"

#: pages/plant_memory.py:173
msgid "PHASE3"
msgstr "Memory phase"

#: pages/plant_memory.py:188
msgid "AXSIS_TIME"
msgstr "Time [min]"

#: pages/plant_memory.py:228 pages/plant_memory.py:239 pages/first_analysis.py:112
msgid "TIME"
msgstr "Time [s]"

#: pages/plant_memory.py:229 pages/plant_memory.py:240 pages/furst_analysis.py:134
msgid "FLUO"
msgstr "Fluorescence [F´ₘ /Fₘ]"

#: pages/plant_memory.py:262
msgid "HEADLINE_BRAIN"
msgstr "# The plant memory"

#: pages/plant_memory.py:269
msgid "INTRODUCTION_BRAIN"
msgstr "Since you have found out how plants react to different light intensities we have news for you! Plants can be actually *trained* to enhance their photoprotection. It has been observed experimentally that plants previously exposed to light react differently to light in comparison to those exposed to light for the first time! This phenomenon is sometimes called **short-term light memory* and we know now which molecular mechanism causes this effect. We have used this knowledge to represent the behaviour with a mathematical model and now, you can perform your own **memory experiments**. Go ahead, can simulate different scenarios using the two sliders below. Do you see how the fluorescence signal differs between different phases of the experiment? If you want to play even more, click the **Expert** version on the left."

#: pages/plant_memory.py:278
msgid "TIP1"
msgstr "***Tip 1:*** *If you want to compare two experiments, you can download the graphs by clicking on the three dots.*"

#: pages/plant_memory.py:280
msgid "TIP2"
msgstr "***Tip2:*** *By clicking on the stop in the upper right corner, you can cancel the calculation process.*"

#: pages/plant_memory.py:342
msgid "CONCLUSION"
msgstr "Conclusion"

#: pages/plant_memory.py:343
msgid "CONCLUSION_TEXT"
msgstr "We hope you had a comprehensive introduction to the fascinating world of plant biology on this website. By analyzing diagrams created with computer models, you were able to learn about the effects of light intensity on photosynthesis and explore the topic of plant short-term memory. In doing so, you should have drawn the following conclusions:\n"
"- Light intensity has a significant effect on the rate of photosynthesis in plants. As light intensity increases, the rate of photosynthesis increases to some degree.\n"
"- The relationship between light intensity and photosynthetic rate is not linear Rather, it follows a curve that peaks at a certain point, the saturation point.\n"
"- Plants have the ability to remember past light exposure and adjust their photosynthetic rates accordingly. This short-term memory allows plants to optimize their energy consumption and adapt to changing environmental conditions.\n"
"\n All in all, PAM measurement is an interesting and effective way to learn about the complex mechanisms underlying plant growth and development. We encourage you to think about these conclusions and the broader implications of these findings for our understanding of the natural world. In doing so, you will come to appreciate even more the incredible complexity and beauty of the plant kingdom."

##############################################################################################

################################### CONTACT #####################################



##############################################################################################
